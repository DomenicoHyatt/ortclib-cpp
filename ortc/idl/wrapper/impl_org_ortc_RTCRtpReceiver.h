// Generated by zsLibEventingTool

#pragma once

#include "types.h"
#include "generated/org_ortc_RTCRtpReceiver.h"


namespace wrapper {
  namespace impl {
    namespace org {
      namespace ortc {

        struct RTCRtpReceiver : public wrapper::org::ortc::RTCRtpReceiver
        {
          RTCRtpReceiverWeakPtr thisWeak_;

          RTCRtpReceiver();
          virtual ~RTCRtpReceiver();

          // methods RTCStatsProvider
          virtual shared_ptr< PromiseWithHolder< wrapper::org::ortc::RTCStatsReportPtr > > getStats(wrapper::org::ortc::RTCStatsTypeSetPtr statTypes) override;

          // methods RTCRtpReceiver
          virtual void wrapper_init_org_ortc_RTCRtpReceiver(
            wrapper::org::ortc::MediaStreamTrackKind kind,
            wrapper::org::ortc::RTCRtpTransportPtr transport
            ) override;
          virtual void wrapper_init_org_ortc_RTCRtpReceiver(
            wrapper::org::ortc::MediaStreamTrackKind kind,
            wrapper::org::ortc::RTCRtpTransportPtr transport,
            wrapper::org::ortc::RTCRtcpTransportPtr rtcpTransport
            ) override;
          virtual void setTransport(wrapper::org::ortc::RTCRtpTransportPtr transport) override;
          virtual void setTransport(
            wrapper::org::ortc::RTCRtpTransportPtr transport,
            wrapper::org::ortc::RTCRtcpTransportPtr rtcpTransport
            ) override;
          virtual PromisePtr receive(wrapper::org::ortc::RTCRtpParametersPtr parameters) override;
          virtual void stop() override;
          virtual shared_ptr< list< wrapper::org::ortc::RTCRtpContributingSourcePtr > > getContributingSources() override;
          virtual void requestSendCsrc(uint32_t csrc) override;

          // properties RTCRtpReceiver
          virtual uint64_t get_objectId() override;
          virtual wrapper::org::ortc::MediaStreamTrackPtr get_track() override;
          virtual wrapper::org::ortc::RTCRtpTransportPtr get_transport() override;
          virtual wrapper::org::ortc::RTCRtpTransportPtr get_rtcpTransport() override;
        };

      } // ortc
    } // org
  } // namespace impl
} // namespace wrapper

