// Generated by zsLibEventingTool

#include "impl_org_ortc_Logger.h"

using ::zsLib::String;
using ::zsLib::Optional;
using ::zsLib::Any;
using ::zsLib::AnyPtr;
using ::zsLib::AnyHolder;
using ::zsLib::Promise;
using ::zsLib::PromisePtr;
using ::zsLib::PromiseWithHolder;
using ::zsLib::eventing::SecureByteBlock;
using ::zsLib::eventing::SecureByteBlockPtr;
using ::std::shared_ptr;
using ::std::weak_ptr;
using ::std::make_shared;
using ::std::list;
using ::std::set;
using ::std::map;

//------------------------------------------------------------------------------
wrapper::impl::org::ortc::Logger::Logger()
{
}

//------------------------------------------------------------------------------
wrapper::org::ortc::LoggerPtr wrapper::org::ortc::Logger::wrapper_create()
{
  auto pThis = make_shared<wrapper::impl::org::ortc::Logger>();
  pThis->thisWeak_ = pThis;
  return pThis;
}

//------------------------------------------------------------------------------
wrapper::impl::org::ortc::Logger::~Logger()
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::Logger::wrapper_init_org_ortc_Logger()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::setDefaultLogLevel(wrapper::org::ortc::log::Level level)
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::setLogLevel(
  wrapper::org::ortc::log::Component component,
  wrapper::org::ortc::log::Level level
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::setLogLevel(
  String component,
  wrapper::org::ortc::log::Level level
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::installStdOutLogger(bool colorizeOutput)
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::installFileLogger(
  String fileName,
  bool colorizeOutput
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::installTelnetLogger(
  uint16_t listenPort,
  ::zsLib::Seconds maxWaitForSocketToBeAvailable,
  bool colorizeOutput
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::installOutgoingTelnetLogger(
  String serverHostWithPort,
  bool colorizeOutput,
  String sendStringUponConnection
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::installDebuggerLogger()
{
}

//------------------------------------------------------------------------------
bool wrapper::org::ortc::Logger::isTelnetLoggerListening()
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
bool wrapper::org::ortc::Logger::isTelnetLoggerConnected()
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
bool wrapper::org::ortc::Logger::isOutgoingTelnetLoggerConnected()
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::uninstallStdOutLogger()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::uninstallFileLogger()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::uninstallTelnetLogger()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::uninstallOutgoingTelnetLogger()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::uninstallDebuggerLogger()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::setDefaultEventingLevel(wrapper::org::ortc::log::Level level)
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::setEventingLevel(
  wrapper::org::ortc::log::Component component,
  wrapper::org::ortc::log::Level level
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::setEventingLevel(
  String component,
  wrapper::org::ortc::log::Level level
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::installEventingListener(
  String sharedSecret,
  uint16_t listenPort,
  ::zsLib::Seconds maxWaitForSocketToBeAvailable
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::connectToEventingServer(
  String sharedSecret,
  String serverHostWithPort
  )
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::uninstallEventingListener()
{
}

//------------------------------------------------------------------------------
void wrapper::org::ortc::Logger::disconnectEventingServer()
{
}


