// Generated by zsLibEventingTool

#include "impl_org_ortc_RTCIceCandidatePairStats.h"

using ::zsLib::String;
using ::zsLib::Optional;
using ::zsLib::Any;
using ::zsLib::AnyPtr;
using ::zsLib::AnyHolder;
using ::zsLib::Promise;
using ::zsLib::PromisePtr;
using ::zsLib::PromiseWithHolder;
using ::zsLib::eventing::SecureByteBlock;
using ::zsLib::eventing::SecureByteBlockPtr;
using ::std::shared_ptr;
using ::std::weak_ptr;
using ::std::make_shared;
using ::std::list;
using ::std::set;
using ::std::map;

//------------------------------------------------------------------------------
wrapper::impl::org::ortc::RTCIceCandidatePairStats::RTCIceCandidatePairStats()
{
}

//------------------------------------------------------------------------------
wrapper::org::ortc::RTCIceCandidatePairStatsPtr wrapper::org::ortc::RTCIceCandidatePairStats::wrapper_create()
{
  auto pThis = make_shared<wrapper::impl::org::ortc::RTCIceCandidatePairStats>();
  pThis->thisWeak_ = pThis;
  return pThis;
}

//------------------------------------------------------------------------------
wrapper::impl::org::ortc::RTCIceCandidatePairStats::~RTCIceCandidatePairStats()
{
}

//------------------------------------------------------------------------------
wrapper::org::ortc::JsonPtr wrapper::impl::org::ortc::RTCIceCandidatePairStats::toJson()
{
  wrapper::org::ortc::JsonPtr result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCIceCandidatePairStats::hash()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
::zsLib::Time wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_timestamp()
{
  ::zsLib::Time result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< wrapper::org::ortc::RTCStatsType > wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_statsType()
{
  Optional< wrapper::org::ortc::RTCStatsType > result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_statsTypeOther()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_id()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCIceCandidatePairStats::wrapper_init_org_ortc_RTCIceCandidatePairStats()
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCIceCandidatePairStats::wrapper_init_org_ortc_RTCIceCandidatePairStats(wrapper::org::ortc::RTCIceCandidatePairStatsPtr source)
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCIceCandidatePairStats::wrapper_init_org_ortc_RTCIceCandidatePairStats(wrapper::org::ortc::JsonPtr json)
{
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_transportId()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_localCandidateId()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_remoteCandidateId()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::ortc::RTCIceCandidatePairState wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_state()
{
  wrapper::org::ortc::RTCIceCandidatePairState result {};
  return result;
}

//------------------------------------------------------------------------------
unsigned long long wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_priority()
{
  unsigned long long result {};
  return result;
}

//------------------------------------------------------------------------------
bool wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_nominated()
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
bool wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_writable()
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
bool wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_readable()
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
unsigned long long wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_bytesSent()
{
  unsigned long long result {};
  return result;
}

//------------------------------------------------------------------------------
unsigned long long wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_bytesReceived()
{
  unsigned long long result {};
  return result;
}

//------------------------------------------------------------------------------
double wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_roundTripTime()
{
  double result {};
  return result;
}

//------------------------------------------------------------------------------
double wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_availableOutgoingBitrate()
{
  double result {};
  return result;
}

//------------------------------------------------------------------------------
double wrapper::impl::org::ortc::RTCIceCandidatePairStats::get_availableIncomingBitrate()
{
  double result {};
  return result;
}


