// Generated by zsLibEventingTool

#include "impl_org_ortc_RTCDataChannel.h"

using ::zsLib::String;
using ::zsLib::Optional;
using ::zsLib::Any;
using ::zsLib::AnyPtr;
using ::zsLib::AnyHolder;
using ::zsLib::Promise;
using ::zsLib::PromisePtr;
using ::zsLib::PromiseWithHolder;
using ::zsLib::PromiseWithHolderPtr;
using ::zsLib::eventing::SecureByteBlock;
using ::zsLib::eventing::SecureByteBlockPtr;
using ::std::shared_ptr;
using ::std::weak_ptr;
using ::std::make_shared;
using ::std::list;
using ::std::set;
using ::std::map;

//------------------------------------------------------------------------------
wrapper::impl::org::ortc::RTCDataChannel::RTCDataChannel()
{
}

//------------------------------------------------------------------------------
wrapper::org::ortc::RTCDataChannelPtr wrapper::org::ortc::RTCDataChannel::wrapper_create()
{
  auto pThis = make_shared<wrapper::impl::org::ortc::RTCDataChannel>();
  pThis->thisWeak_ = pThis;
  return pThis;
}

//------------------------------------------------------------------------------
wrapper::impl::org::ortc::RTCDataChannel::~RTCDataChannel()
{
}

//------------------------------------------------------------------------------
shared_ptr< PromiseWithHolderPtr< wrapper::org::ortc::RTCStatsReportPtr > > wrapper::impl::org::ortc::RTCDataChannel::getStats(wrapper::org::ortc::RTCStatsTypeSetPtr statTypes)
{
  shared_ptr< PromiseWithHolderPtr< wrapper::org::ortc::RTCStatsReportPtr > > result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::wrapper_init_org_ortc_RTCDataChannel(
  wrapper::org::ortc::RTCDataTransportPtr transport,
  wrapper::org::ortc::RTCDataChannelParametersPtr params
  )
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::close()
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::send(String text)
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::send(SecureByteBlockPtr data)
{
}

//------------------------------------------------------------------------------
uint64_t wrapper::impl::org::ortc::RTCDataChannel::get_objectId()
{
  uint64_t result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::ortc::RTCDataTransportPtr wrapper::impl::org::ortc::RTCDataChannel::get_transport()
{
  wrapper::org::ortc::RTCDataTransportPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::ortc::RTCDataChannelParametersPtr wrapper::impl::org::ortc::RTCDataChannel::get_parameters()
{
  wrapper::org::ortc::RTCDataChannelParametersPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::ortc::RTCDataChannelState wrapper::impl::org::ortc::RTCDataChannel::get_readyState()
{
  wrapper::org::ortc::RTCDataChannelState result {};
  return result;
}

//------------------------------------------------------------------------------
uint64_t wrapper::impl::org::ortc::RTCDataChannel::get_bufferedAmount()
{
  uint64_t result {};
  return result;
}

//------------------------------------------------------------------------------
uint64_t wrapper::impl::org::ortc::RTCDataChannel::get_bufferedAmountLowThreshold()
{
  uint64_t result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::set_bufferedAmountLowThreshold(uint64_t value)
{
}

//------------------------------------------------------------------------------
String wrapper::impl::org::ortc::RTCDataChannel::get_binaryType()
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::set_binaryType(String value)
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::ortc::RTCDataChannel::wrapper_onObserverCountChanged(size_t count)
{
}


