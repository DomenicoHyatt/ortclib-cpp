/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace ortc
  {
    typedef uint32 SsrcType;
    typedef uint8 PayloadType;
    typedef std::list<SsrcType> SsrcTypeList;

    struct RTCStatsTypeSet
    {
      typedef std::set<RTCStatsType> EnumSet;

      [constructor, default]
      void RTCStatsTypeSet();
      [constructor, altname(RTCStatsTypeSetWithValues)]
      void RTCStatsTypeSet(EnumSet values);

      bool hasStatType(RTCStatsType type);
    };

    struct RTCStats
    {
      [getter]
      Time                timestamp;
      [optional, getter]
      RTCStatsType        statsType;
      [getter]
      string              statsTypeOther;
      [getter]
      string              id;

      [constructor, default]
      void RTCStats();
      [constructor, altname(RTCStatsClone)]
      void RTCStats(RTCStats source);
      [constructor, default, altname(RTCStatsWithJson)]
      void RTCStats(Json json);

      Json toJson();
      string hash();

      void eventTrace();
    };


    struct RTCRtpStreamStats : RTCStats
    {
      [optional, getter]
      SsrcType            ssrc;
      [getter]
      string              associatedStatId;
      [getter]
      bool                isRemote;
      [getter]
      string              mediaType;
      [getter]
      string              mediaTrackId;
      [getter]
      string              transportId;
      [getter]
      string              codecId;
      [getter]
      unsigned long       firCount;
      [getter]
      unsigned long       pliCount;
      [getter]
      unsigned long       nackCount;
      [getter]
      unsigned long       sliCount;

      [constructor, default]
      void RTCRtpStreamStats();
      [constructor, altname(RTCRtpStreamStatsClone)]
      void RTCRtpStreamStats(RTCRtpStreamStats source);
      [constructor, default, altname(RTCRtpStreamStatsWithJson)]
      void RTCRtpStreamStats(Json json);
    };

    struct RTCCodec : RTCStats
    {
      [optional, getter]
      PayloadType      payloadType;
      [getter]
      string           codec;
      [getter]
      unsigned long    clockRate;
      [optional, getter]
      unsigned long    channels;
      [getter]
      string           parameters;

      [constructor, default]
      void RTCCodec();
      [constructor, altname(RTCCodecClone)]
      void RTCCodec(RTCCodec source);
      [constructor, default, altname(RTCCodecWithJson)]
      void RTCCodec(Json json);
    };

    struct RTCInboundRtpStreamStats : RTCRtpStreamStats
    {
      [getter]
      unsigned long       packetsReceived;
      [getter]
      unsigned long long  bytesReceived;
      [getter]
      unsigned long       packetsLost;
      [getter]
      double              jitter;
      [getter]
      double              fractionLost;
      [getter]
      Milliseconds        endToEndDelay;

      [constructor, default]
      void RTCInboundRtpStreamStats();
      [constructor, altname(RTCInboundRtpStreamStatsClone)]
      void RTCInboundRtpStreamStats(RTCInboundRtpStreamStats source);
      [constructor, default, altname(RTCInboundRtpStreamStatsWithJson)]
      void RTCInboundRtpStreamStats(Json json);
    };

    struct RTCOutboundRtpStreamStats : RTCRtpStreamStats
    {
      [getter]
      unsigned long       packetsSent;
      [getter]
      unsigned long long  bytesSent;
      [getter]
      double              targetBitrate;
      [getter]
      double              roundTripTime;

      [constructor, default]
      void RTCOutboundRtpStreamStats();
      [constructor, altname(RTCOutboundRtpStreamStatsClone)]
      void RTCOutboundRtpStreamStats(RTCOutboundRtpStreamStats source);
      [constructor, default, altname(RTCOutboundRtpStreamStatsWithJson)]
      void RTCOutboundRtpStreamStats(Json json);
    };

    struct RTCSctpTransportStats : RTCStats
    {
      [getter]
      unsigned long dataChannelsOpened;
      [getter]
      unsigned long dataChannelsClosed;

      [constructor, default]
      void RTCSctpTransportStats();
      [constructor, altname(RTCSctpTransportStatsClone)]
      void RTCSctpTransportStats(RTCSctpTransportStats source);
      [constructor, default, altname(RTCSctpTransportStatsWithJson)]
      void RTCSctpTransportStats(Json json);
    };

    struct RTCMediaStreamStats : RTCStats
    {
      [getter]
      string      streamId;
      [getter]
      StringList  trackIds;

      [constructor, default]
      void RTCMediaStreamStats();
      [constructor, altname(RTCMediaStreamStatsClone)]
      void RTCMediaStreamStats(RTCMediaStreamStats source);
      [constructor, default, altname(RTCMediaStreamStatsWithJson)]
      void RTCMediaStreamStats(Json json);
    };


    struct RTCMediaStreamTrackStats : RTCStats
    {
      [getter]
      string          trackId;
      [getter]
      bool            remoteSource;
      [getter]
      SsrcTypeList    ssrcIds;
      [getter]
      unsigned long   frameWidth;
      [getter]
      unsigned long   frameHeight;
      [getter]
      double          framesPerSecond;
      [getter]
      unsigned long   framesSent;
      [getter]
      unsigned long   framesReceived;
      [getter]
      unsigned long   framesDecoded;
      [getter]
      unsigned long   framesDropped;
      [getter]
      unsigned long   framesCorrupted;
      [getter]
      double          audioLevel;
      [getter]
      double          echoReturnLoss;
      [getter]
      double          echoReturnLossEnhancement;

      [constructor, default]
      void RTCMediaStreamTrackStats();
      [constructor, altname(RTCMediaStreamTrackStats)]
      void RTCMediaStreamTrackStats(RTCMediaStreamTrackStats source);
      [constructor, default, altname(RTCMediaStreamTrackStatsWithJson)]
      void RTCMediaStreamTrackStats(Json json);
    };


    struct RTCDataChannelStats : RTCStats
    {
      [getter]
      string                    label;
      [getter]
      string                    protocol;
      [getter]
      long                      dataChannelId;
      [getter]
      RTCDataChannelState       state;
      [getter]
      unsigned long             messagesSent;
      [getter]
      unsigned long long        bytesSent;
      [getter]
      unsigned long             messagesReceived;
      [getter]
      unsigned long long        bytesReceived;

      [constructor, default]
      void RTCDataChannelStats();
      [constructor, altname(RTCDataChannelStatsClone)]
      void RTCDataChannelStats(RTCDataChannelStats source);
      [constructor, default, altname(RTCDataChannelStatsWithJson)]
      void RTCDataChannelStats(Json json);
    };


    struct RTCIceGathererStats : RTCStats
    {
      [getter]
      unsigned long long  bytesSent;
      [getter]
      unsigned long long  bytesReceived;
      [getter]
      string              rtcpGathererStatsId;

      [constructor, default]
      void RTCIceGathererStats();
      [constructor, altname(RTCIceGathererStatsClone)]
      void RTCIceGathererStats(RTCIceGathererStats source);
      [constructor, default, altname(RTCIceGathererStatsWithJson)]
      void RTCIceGathererStats(Json json);
    };

    struct RTCIceTransportStats : RTCStats
    {
      [getter]
      unsigned long long  bytesSent;
      [getter]
      unsigned long long  bytesReceived;
      [getter]
      string              rtcpTransportStatsId;
      [getter]
      bool                activeConnection;
      [getter]
      string              selectedCandidatePairId;

      [constructor, default]
      void RTCIceTransportStats();
      [constructor, altname(RTCIceTransportStatsClone)]
      void RTCIceTransportStats(RTCIceTransportStats source);
      [constructor, default, altname(RTCIceTransportStatsWithJson)]
      void RTCIceTransportStats(Json json);
    };

    struct RTCDtlsTransportStats : RTCStats
    {
      [getter]
      string localCertificateId;
      [getter]
      string remoteCertificateId;

      [constructor, default]
      void RTCDtlsTransportStats();
      [constructor, altname(RTCDtlsTransportStatsClone)]
      void RTCDtlsTransportStats(RTCDtlsTransportStats source);
      [constructor, default, altname(RTCDtlsTransportStatsWithJson)]
      void RTCDtlsTransportStats(Json json);
    };

    struct RTCSrtpTransportStats : RTCStats
    {
      [constructor, default]
      void RTCSrtpTransportStats();
      [constructor, altname(RTCSrtpTransportStatsClone)]
      void RTCSrtpTransportStats(RTCDtlsTransportStats source);
      [constructor, default, altname(RTCSrtpTransportStatsWithJson)]
      void RTCSrtpTransportStats(Json json);
    };

    struct RTCIceCandidateAttributes : RTCStats
    {
      [getter]
      string                  relatedId;
      [getter]
      string                  ipAddress;
      [getter]
      unsigned long           portNumber;
      [getter]
      string                  transport;
      [getter]
      RTCIceCandidateType     candidateType;
      [getter]
      unsigned long           priority;
      [getter]
      string                  addressSourceUrl;

      [constructor, default]
      void RTCIceCandidateAttributes();
      [constructor, altname(RTCIceCandidateAttributesClone)]
      void RTCIceCandidateAttributes(RTCIceCandidateAttributes source);
      [constructor, default, altname(RTCIceCandidateAttributesWithJson)]
      void RTCIceCandidateAttributes(Json json);
    };

    struct RTCIceCandidatePairStats : RTCStats
    {
      [getter]
      string                          transportId;
      [getter]
      string                          localCandidateId;
      [getter]
      string                          remoteCandidateId;
      [getter]
      RTCIceCandidatePairState        state;
      [getter]
      unsigned long long              priority;
      [getter]
      bool                            nominated;
      [getter]
      bool                            writable;
      [getter]
      bool                            readable;
      [getter]
      unsigned long long              bytesSent;
      [getter]
      unsigned long long              bytesReceived;
      [getter]
      double                          roundTripTime;
      [getter]
      double                          availableOutgoingBitrate;
      [getter]
      double                          availableIncomingBitrate;

      [constructor, default]
      void RTCIceCandidatePairStats();
      [constructor, altname(RTCIceCandidatePairStatsClone)]
      void RTCIceCandidatePairStats(RTCIceCandidatePairStats source);
      [constructor, default, altname(RTCIceCandidatePairStatsWithJson)]
      void RTCIceCandidatePairStats(Json json);
    };


    struct RTCCertificateStats : RTCStats
    {
      [getter]
      string fingerprint;
      [getter]
      string fingerprintAlgorithm;
      [getter]
      string base64Certificate;
      [getter]
      string issuerCertificateId;

      [constructor, default]
      void RTCCertificateStats();
      [constructor, altname(RTCCertificateStatsClone)]
      void RTCCertificateStats(RTCCertificateStats source);
      [constructor, default, altname(RTCCertificateStatsWithJson)]
      void RTCCertificateStats(Json json);
    };

    interaction RTCStatsReport
    {
      typedef StringList IdList;

      [getter]
      puid id;

      [getter]
      IdList statsIds;
      RTCStats getStats(string id);
    };
  }
}
