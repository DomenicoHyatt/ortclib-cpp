// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>
#ifdef _WIN32

#include "ortc.events_win.h"

#else

#include <zsLib/eventing/Log.h>
#include <stdint.h>

namespace zsLib {
  namespace eventing {

    template <typename TWriteType>
    void eventWriteBuffer(BYTE * &p, TWriteType value)
    {
      memcpy(&p, &value, sizeof(value));
      p += sizeof(value);
    }
    inline void eventWriteBuffer(const BYTE ** &p, const BYTE *buffer, size_t * &bufferSizes, size_t size)
    {
      (*p) = buffer;
      (*bufferSizes) = size;
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(const BYTE ** &p, const char *str, size_t * &bufferSizes)
    {
      (*p) = reinterpret_cast<const BYTE *>(str);
      (*bufferSizes) = (NULL == str ? 0 : strlen(str)) * sizeof(char);
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(const BYTE ** &p, const wchar_t *str, size_t * &bufferSizes)
    {
      (*p) = reinterpret_cast<const BYTE *>(str);
      (*bufferSizes) = (NULL == str ? 0 : wcslen(str)) * sizeof(wchar_t);
      ++p;
      ++bufferSizes;
    }


    inline uintptr_t &getEventHandleOrtcLib()
    {
      static uintptr_t gHandle {};
      return gHandle;
    }

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcLib() ZS_EVENTING_REGISTER_EVENT_WRITER(zsLib::eventing::getEventHandleOrtcLib(), "2bc80581-9143-4013-8ff6-223d3479b14e", "OrtcLib")
#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcLib() ZS_EVENTING_UNREGISTER_EVENT_WRITER(zsLib::eventing::getEventHandleOrtcLib())


#define ZS_INTERNAL_EVENTING_EVENT_CertificateCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[48]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue10)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 48, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateFingerprint(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateGeneratedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 9)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelBufferedAmountLowThresholdChanged(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 33)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelClose(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[19]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 19, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelMessage(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue8), xxIndirectSize, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacketDelivered(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue8), xxIndirectSize, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlAck(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[21]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 21, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportDeliverOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue8), xxIndirectSize, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestNotifyClosed(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestShutdown(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReady(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReadyFailure(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportStateChanged(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendBinary(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlAck(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 9)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendString(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 40, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardDataPacketToIceTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingEncryptedPacketToSrtpTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToDataTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToRtpListener(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitialization(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 40)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallCipher(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallFingerprint(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalIceStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 32)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 17, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportRoleSet(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendEncryptedRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSrtpKeyingMaterialSetup(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStart(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererAddCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[25]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 25, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[91]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue11)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue15)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 91, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreatedAssociateGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 33, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 33)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 32)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererFilterCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererGather(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[25]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 25)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBind(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBindFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortClose(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallInterfaceNameMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallPreference(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallIceTransport(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalBackOffTimerStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalDnsLoookupCompleteEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalIceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalLikelyReflexiveActivityEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoveryCompleteEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoverySendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTurnSocketStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererPendingResolveHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortFoundMapped(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortFoundIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveIceTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemovetAllIceTransportRelatedRoutes(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveFoundHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveHostIP(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[56]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue19), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue20)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 56, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterInternalEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[10]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[10]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 10); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSearchQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 17, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTcp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTurn(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaUdp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketSentOutgoing(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketForwardingToTurnSocket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketSentTo(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[29]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[8]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[8]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue15)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 29, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidateComplete(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportBufferingIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCandidatePairChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportAttachedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 33)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportDetachedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerNoNeedToWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[74]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue7)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue11)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 74)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreateAssociatedTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringBufferedIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingStunPacketToSecureTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDisposingBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportForwardSecureTransportPacketToGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundationDependencyFreezePromise(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerAttachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerDetachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalDeliveryPendingPacketsEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateCompleteEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[7]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[7]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 7); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererRemoveLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[7]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[7]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 7); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalRoleConflictDetectedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportAttachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportDetachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponse(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponseMismatch(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterTimedOut(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalUnfrozenPromiseEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportKeepWarm(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedPacketFromGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[29]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[8]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[8]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue15)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 29, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidateComplete(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRetryReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteStateTrackerStateCountChange(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37, xValue38, xValue39, xValue40, xValue41) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[131]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[17]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[17]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue19)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue20)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue21), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue22), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue23)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue24), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue25), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue26), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue27)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue28)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue29)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue30)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue31)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue32)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue33)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue34)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue35)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue36)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue37)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue38)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue39)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue40)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue41)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 131, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 17); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSecureTransportSendPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSendStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[19]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 19, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcCreate(xSubsystem) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[0]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 0)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcDestroy(xSubsystem) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[0]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 0)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceGathererHostPortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceTransportInternalWarmRoutesChangedEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcSrtpTransportInstallKeyingMaterial(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[5]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[5]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 5); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerBufferIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[64]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 64)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDisposeBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerForwardIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByMuxID(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 17)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 20)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[27]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 27, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterReceiver(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[13]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 13, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[27]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 27, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterReceiver(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterSender(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[14]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 14)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalUpdateEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCloseChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[88]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue11)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue12)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 88, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 17)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByRid(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalChannelGoneEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReceive(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[11]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 11, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[14]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 14)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportCodec(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 33, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[3]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 3, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportRtcpFeedback(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[0]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 0, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 32)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverTrackActiveChannelChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[13]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 13, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[14]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 14)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAddChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAttachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelChangeTrack(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalUpdateEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 40)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDetachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalChannelGoneEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalDestroyChannelEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderRemoveChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSend(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTrack(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 32)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSsrcConflictEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[21]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Warning, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 21)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderUpdateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportBufferIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[29]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 29)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDataChannelEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDeliverIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDisposeBufferedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalShutdownEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[22]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 22)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDeliverIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerListen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerRegisterNewTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 20)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportCreatedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 20)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 20)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportShutdownEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 20)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportRegisterNewDataChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[18]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 18)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportShutdownDataChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[18]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 18)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 24)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDeliverIncomingDecryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 8)); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportReceivedIncomingEncryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingPacketAndEncrypt(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    const BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectBuffer = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Info, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_cRtpListenerRegisterSender(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Info, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, &(xxOutputBuffer[0], 16)); \
  }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

