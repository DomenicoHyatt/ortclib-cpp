// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>
#ifdef _WIN32

#include "ortc.events_win.h"

#else

#include <zsLib/eventing/Log.h>
#include <stdint.h>

namespace zsLib {
  namespace eventing {

    template <typename TWriteType>
    void eventWriteBuffer(BYTE * &p, TWriteType value)
    {
      memcpy(&p, &value, sizeof(value));
      p += sizeof(value);
    }
    inline void eventWriteBuffer(BYTE ** &p, const BYTE *buffer, size_t * &bufferSizes, size_t size)
    {
      (*p) = const_cast<BYTE *>(buffer);
      (*bufferSizes) = size;
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(BYTE ** &p, const char *str, size_t * &bufferSizes)
    {
      (*p) = const_cast<BYTE *>(reinterpret_cast<const BYTE *>(str));
      (*bufferSizes) = (NULL == str ? 0 : strlen(str)) * sizeof(char);
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(const BYTE ** &p, const wchar_t *str, size_t * &bufferSizes)
    {
      (*p) = reinterpret_cast<const BYTE *>(str);
      (*bufferSizes) = (NULL == str ? 0 : wcslen(str)) * sizeof(wchar_t);
      ++p;
      ++bufferSizes;
    }


    inline uintptr_t &getEventHandleOrtcLib()
    {
      static uintptr_t gHandle {};
      return gHandle;
    }

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcLib() ZS_EVENTING_REGISTER_EVENT_WRITER(zsLib::eventing::getEventHandleOrtcLib(), "2bc80581-9143-4013-8ff6-223d3479b14e", "OrtcLib", "6369c86446dbbf50048f8c69bb6ba0974211934322b0bc5df4262f303fe976a8")
#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcLib() ZS_EVENTING_UNREGISTER_EVENT_WRITER(zsLib::eventing::getEventHandleOrtcLib())


#define ZS_INTERNAL_EVENTING_EVENT_CertificateCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[48]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue10)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1000, &(xxOutputBuffer[0]), 48, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1001, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateFingerprint(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1002, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateGeneratedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1003, &(xxOutputBuffer[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelBufferedAmountLowThresholdChanged(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1004, &(xxOutputBuffer[0]), 33); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1005, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelClose(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1006, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[19]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1007, &(xxOutputBuffer[0]), 19, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1008, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1009, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelMessage(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxPIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1010, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue8), xxPIndirectSize, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1011, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacketDelivered(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue8), xxPIndirectSize, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1012, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlAck(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1013, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[21]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1014, &(xxOutputBuffer[0]), 21, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportDeliverOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue8), xxPIndirectSize, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1015, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxPIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1016, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestNotifyClosed(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1017, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestShutdown(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1018, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReady(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1019, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReadyFailure(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1020, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportStateChanged(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1021, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendBinary(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1022, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlAck(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1023, &(xxOutputBuffer[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1024, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendString(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1025, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1026, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1027, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1028, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1029, &(xxOutputBuffer[0]), 40, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1030, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1031, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardDataPacketToIceTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1032, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingEncryptedPacketToSrtpTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1033, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToDataTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1034, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToRtpListener(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1035, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitialization(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1036, &(xxOutputBuffer[0]), 40); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallCipher(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1037, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallFingerprint(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1038, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalIceStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1039, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1040, &(xxOutputBuffer[0]), 32); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1041, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1042, &(xxOutputBuffer[0]), 17, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1043, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportRoleSet(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1044, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1045, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendEncryptedRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1046, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1047, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSrtpKeyingMaterialSetup(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1048, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStart(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1049, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1050, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1051, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1052, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererAddCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1053, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[25]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1054, &(xxOutputBuffer[0]), 25, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1055, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1056, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[91]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue11)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue15)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1057, &(xxOutputBuffer[0]), 91, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreatedAssociateGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1058, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxPIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1059, &(xxOutputBuffer[0]), 33, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1060, &(xxOutputBuffer[0]), 33); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1061, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1062, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1063, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1064, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1065, &(xxOutputBuffer[0]), 32); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererFilterCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1066, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererGather(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[25]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1067, &(xxOutputBuffer[0]), 25); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBind(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1068, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBindFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1069, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortClose(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1070, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1071, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallInterfaceNameMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1072, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallPreference(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1073, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallIceTransport(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1074, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1075, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalBackOffTimerStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1076, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalDnsLoookupCompleteEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1077, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1078, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1079, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1080, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalIceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1081, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalLikelyReflexiveActivityEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1082, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoveryCompleteEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1083, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoverySendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1084, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1085, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1086, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1087, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1088, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTurnSocketStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1089, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1090, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererPendingResolveHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1091, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1092, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1093, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortFoundMapped(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1094, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1095, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1096, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortFoundIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1097, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[36]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1098, &(xxOutputBuffer[0]), 36, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveIceTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1099, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1100, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemovetAllIceTransportRelatedRoutes(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1101, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveFoundHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1102, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveHostIP(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1103, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[56]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[9]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[9]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue19), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue20)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1104, &(xxOutputBuffer[0]), 56, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1105, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1106, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1107, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterInternalEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1108, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[10]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[10]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1109, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 10); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSearchQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1110, &(xxOutputBuffer[0]), 17, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1111, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1112, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTcp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1113, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTurn(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1114, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaUdp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxPIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1115, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1116, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1117, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1118, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1119, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1120, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketSentOutgoing(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1121, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1122, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1123, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketForwardingToTurnSocket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1124, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1125, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketSentTo(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1126, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[29]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[8]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[8]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue15)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1127, &(xxOutputBuffer[0]), 29, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidateComplete(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1128, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportBufferingIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1129, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1130, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCandidatePairChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1131, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1132, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1133, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1134, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportAttachedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1135, &(xxOutputBuffer[0]), 33); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportDetachedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1136, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1137, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerNoNeedToWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1138, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1139, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1140, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[74]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue7)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue11)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1141, &(xxOutputBuffer[0]), 74); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreateAssociatedTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1142, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringBufferedIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1143, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1144, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingStunPacketToSecureTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1145, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1146, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDisposingBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1147, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1148, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportForwardSecureTransportPacketToGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1149, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1150, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundationDependencyFreezePromise(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1151, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerAttachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1152, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerDetachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1153, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalDeliveryPendingPacketsEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1154, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateCompleteEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1155, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[7]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[7]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1156, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 7); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererRemoveLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[7]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[7]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1157, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 7); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1158, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalRoleConflictDetectedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1159, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportAttachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1160, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportDetachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1161, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1162, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponse(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1163, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponseMismatch(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1164, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1165, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterTimedOut(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1166, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1167, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalUnfrozenPromiseEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1168, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1169, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportKeepWarm(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1170, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedPacketFromGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1171, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1172, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1173, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[29]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[8]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[8]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue9), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue12), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue14)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue15)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1174, &(xxOutputBuffer[0]), 29, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidateComplete(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1175, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRetryReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1176, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteStateTrackerStateCountChange(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1177, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37, xValue38, xValue39, xValue40, xValue41) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[131]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[17]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[17]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue10), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue11), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue13), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue16)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue19)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue20)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue21), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue22), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue23)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue24), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue25), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue26), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue27)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue28)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue29)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue30)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue31)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue32)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue33)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue34)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue35)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue36)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue37)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue38)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue39)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue40)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue41)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1178, &(xxOutputBuffer[0]), 131, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 17); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSecureTransportSendPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1179, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSendStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1180, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[19]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1181, &(xxOutputBuffer[0]), 19, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1182, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1183, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcCreate(xSubsystem) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1184, &(xxOutputBuffer[0]), 0); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcDestroy(xSubsystem) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1185, &(xxOutputBuffer[0]), 0); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceGathererHostPortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1186, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceTransportInternalWarmRoutesChangedEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1187, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcSrtpTransportInstallKeyingMaterial(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[5]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[5]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1188, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 5); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerBufferIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1189, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1190, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[64]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1191, &(xxOutputBuffer[0]), 64); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1192, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDisposeBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1193, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1194, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1195, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerForwardIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1196, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByMuxID(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1197, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1198, &(xxOutputBuffer[0]), 17); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1199, &(xxOutputBuffer[0]), 20); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1200, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1201, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1202, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[27]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1203, &(xxOutputBuffer[0]), 27, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterReceiver(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1204, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1205, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1206, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1207, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1208, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1209, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[13]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1210, &(xxOutputBuffer[0]), 13, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[27]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1211, &(xxOutputBuffer[0]), 27, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterReceiver(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1212, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterSender(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1213, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1214, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1215, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1216, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1217, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[14]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1218, &(xxOutputBuffer[0]), 14); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1219, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1220, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1221, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1222, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1223, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1224, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalUpdateEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1225, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1226, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCloseChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1227, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[88]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue10)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue11)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue12)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1228, &(xxOutputBuffer[0]), 88, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1229, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1230, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1231, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1232, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1233, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1234, &(xxOutputBuffer[0]), 17); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByRid(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1235, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1236, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalChannelGoneEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1237, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1238, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1239, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1240, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReceive(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1241, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[11]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1242, &(xxOutputBuffer[0]), 11, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1243, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[14]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1244, &(xxOutputBuffer[0]), 14); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportCodec(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[33]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1245, &(xxOutputBuffer[0]), 33, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[3]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1246, &(xxOutputBuffer[0]), 3, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportRtcpFeedback(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1247, NULL, 0, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1248, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1249, &(xxOutputBuffer[0]), 32); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1250, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1251, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue6), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1252, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1253, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1254, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1255, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverTrackActiveChannelChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1256, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[13]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1257, &(xxOutputBuffer[0]), 13, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1258, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[14]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1259, &(xxOutputBuffer[0]), 14); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAddChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1260, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAttachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1261, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1262, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelChangeTrack(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1263, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1264, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1265, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1266, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1267, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1268, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalUpdateEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1269, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1270, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1271, &(xxOutputBuffer[0]), 40); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1272, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1273, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDetachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1274, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1275, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1276, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalChannelGoneEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1277, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalDestroyChannelEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1278, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1279, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1280, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderRemoveChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1281, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSend(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1282, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1283, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTrack(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1284, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1285, &(xxOutputBuffer[0]), 32); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSsrcConflictEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[21]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Warning, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1286, &(xxOutputBuffer[0]), 21); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1287, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1288, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderUpdateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1289, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1290, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1291, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1292, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportBufferIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1293, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1294, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[29]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1295, &(xxOutputBuffer[0]), 29); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDataChannelEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1296, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDeliverIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxPIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1297, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1298, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDisposeBufferedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1299, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1300, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1301, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalShutdownEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1302, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1303, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1304, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[22]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1305, &(xxOutputBuffer[0]), 22); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDeliverIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1306, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1307, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerListen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1308, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1309, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerRegisterNewTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1310, &(xxOutputBuffer[0]), 20); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportCreatedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1311, &(xxOutputBuffer[0]), 20); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1312, &(xxOutputBuffer[0]), 20); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportShutdownEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1313, &(xxOutputBuffer[0]), 20); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1314, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1315, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxPIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1316, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportRegisterNewDataChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[18]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1317, &(xxOutputBuffer[0]), 18); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1318, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[28]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue7), xxPIndirectSize, (xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1319, &(xxOutputBuffer[0]), 28, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportShutdownDataChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[18]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1320, &(xxOutputBuffer[0]), 18); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1321, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1322, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1323, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1324, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1325, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDeliverIncomingDecryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1326, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1327, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportReceivedIncomingEncryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1328, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1329, &(xxOutputBuffer[0]), 32, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingPacketAndEncrypt(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1330, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_cRtpListenerRegisterSender(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1331, &(xxOutputBuffer[0]), 16); \
  }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

