//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider OrtcLibStatsReport Event Count 7
//+
EXTERN_C __declspec(selectany) const GUID ORTC_LIB_STATS_REPORT_PROVIDER_GUID = {0xbda496d1, 0x3663, 0x4a3e, {0xb0, 0x12, 0x66, 0x2f, 0xf5, 0xdc, 0xcd, 0x62}};

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportInt32 = {0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportInt32_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportInt64 = {0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportInt64_value 0x66
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportFloat = {0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportFloat_value 0x67
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportString = {0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportString_value 0x68
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportBool = {0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportBool_value 0x69
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportCommand = {0x6a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportCommand_value 0x6a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OrtcStatsReportMark = {0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define OrtcStatsReportMark_value 0x6b

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG OrtcLibStatsReportEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG OrtcLibStatsReportKeywords[1] = {0x0};
EXTERN_C __declspec(selectany) const UCHAR OrtcLibStatsReportLevels[1] = {0};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ORTC_LIB_STATS_REPORT_PROVIDER_GUID_Context = {0, 0, 0, 0, 0, 0, 0, 0, 1, OrtcLibStatsReportEnableBits, OrtcLibStatsReportKeywords, OrtcLibStatsReportLevels};

EXTERN_C __declspec(selectany) REGHANDLE OrtcLibStatsReportHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
#pragma warning(push)
#pragma warning(disable:6103)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}
#pragma warning(pop)


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterOrtcLibStatsReport
#define EventRegisterOrtcLibStatsReport() McGenEventRegister(&ORTC_LIB_STATS_REPORT_PROVIDER_GUID, McGenControlCallbackV2, &ORTC_LIB_STATS_REPORT_PROVIDER_GUID_Context, &OrtcLibStatsReportHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterOrtcLibStatsReport
#define EventUnregisterOrtcLibStatsReport() McGenEventUnregister(&OrtcLibStatsReportHandle) 
#endif

//
// Enablement check macro for OrtcStatsReportInt32
//

#define EventEnabledOrtcStatsReportInt32() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportInt32
//
#define EventWriteOrtcStatsReportInt32(stat_group_name, timestamp, stat_name, stat_value)\
        EventEnabledOrtcStatsReportInt32() ?\
        Template_sgsd(OrtcLibStatsReportHandle, &OrtcStatsReportInt32, stat_group_name, timestamp, stat_name, stat_value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OrtcStatsReportInt64
//

#define EventEnabledOrtcStatsReportInt64() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportInt64
//
#define EventWriteOrtcStatsReportInt64(stat_group_name, timestamp, stat_name, stat_value)\
        EventEnabledOrtcStatsReportInt64() ?\
        Template_sgsi(OrtcLibStatsReportHandle, &OrtcStatsReportInt64, stat_group_name, timestamp, stat_name, stat_value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OrtcStatsReportFloat
//

#define EventEnabledOrtcStatsReportFloat() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportFloat
//
#define EventWriteOrtcStatsReportFloat(stat_group_name, timestamp, stat_name, stat_value)\
        EventEnabledOrtcStatsReportFloat() ?\
        Template_sgsf(OrtcLibStatsReportHandle, &OrtcStatsReportFloat, stat_group_name, timestamp, stat_name, stat_value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OrtcStatsReportString
//

#define EventEnabledOrtcStatsReportString() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportString
//
#define EventWriteOrtcStatsReportString(stat_group_name, timestamp, stat_name, stat_value)\
        EventEnabledOrtcStatsReportString() ?\
        Template_sgss(OrtcLibStatsReportHandle, &OrtcStatsReportString, stat_group_name, timestamp, stat_name, stat_value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OrtcStatsReportBool
//

#define EventEnabledOrtcStatsReportBool() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportBool
//
#define EventWriteOrtcStatsReportBool(stat_group_name, timestamp, stat_name, stat_value)\
        EventEnabledOrtcStatsReportBool() ?\
        Template_sgst(OrtcLibStatsReportHandle, &OrtcStatsReportBool, stat_group_name, timestamp, stat_name, stat_value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OrtcStatsReportCommand
//

#define EventEnabledOrtcStatsReportCommand() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportCommand
//
#define EventWriteOrtcStatsReportCommand(command_name)\
        EventEnabledOrtcStatsReportCommand() ?\
        Template_s(OrtcLibStatsReportHandle, &OrtcStatsReportCommand, command_name)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OrtcStatsReportMark
//

#define EventEnabledOrtcStatsReportMark() ((OrtcLibStatsReportEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OrtcStatsReportMark
//
#define EventWriteOrtcStatsReportMark(mark_name, timestamp)\
        EventEnabledOrtcStatsReportMark() ?\
        Template_sg(OrtcLibStatsReportHandle, &OrtcStatsReportMark, mark_name, timestamp)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : T_StatsReportInt32
//
#ifndef Template_sgsd_def
#define Template_sgsd_def
ETW_INLINE
ULONG
Template_sgsd(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const double  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ const signed int  _Arg3
    )
{
#define ARGUMENT_COUNT_sgsd 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sgsd];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const signed int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sgsd, EventData);
}
#endif

//
//Template from manifest : T_StatsReportInt64
//
#ifndef Template_sgsi_def
#define Template_sgsi_def
ETW_INLINE
ULONG
Template_sgsi(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const double  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ signed __int64  _Arg3
    )
{
#define ARGUMENT_COUNT_sgsi 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sgsi];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sgsi, EventData);
}
#endif

//
//Template from manifest : T_StatsReportFloat
//
#ifndef Template_sgsf_def
#define Template_sgsf_def
ETW_INLINE
ULONG
Template_sgsf(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const double  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ const float  _Arg3
    )
{
#define ARGUMENT_COUNT_sgsf 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sgsf];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const float)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sgsf, EventData);
}
#endif

//
//Template from manifest : T_StatsReportString
//
#ifndef Template_sgss_def
#define Template_sgss_def
ETW_INLINE
ULONG
Template_sgss(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const double  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_opt_ LPCSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_sgss 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sgss];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sgss, EventData);
}
#endif

//
//Template from manifest : T_StatsReportBool
//
#ifndef Template_sgst_def
#define Template_sgst_def
ETW_INLINE
ULONG
Template_sgst(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const double  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ const BOOL  _Arg3
    )
{
#define ARGUMENT_COUNT_sgst 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sgst];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sgst, EventData);
}
#endif

//
//Template from manifest : T_Command
//
#ifndef Template_s_def
#define Template_s_def
ETW_INLINE
ULONG
Template_s(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0
    )
{
#define ARGUMENT_COUNT_s 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_s];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_s, EventData);
}
#endif

//
//Template from manifest : T_Mark
//
#ifndef Template_sg_def
#define Template_sg_def
ETW_INLINE
ULONG
Template_sg(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const double  _Arg1
    )
{
#define ARGUMENT_COUNT_sg 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sg];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const double)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sg, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_OrtcLibStatsReport_ProviderMessage 0x90000001L
#define MSG_Event_OrtcStatsReportInt32       0xB0000065L
#define MSG_Event_OrtcStatsReportInt64       0xB0000066L
#define MSG_Event_OrtcStatsReportFloat       0xB0000067L
#define MSG_Event_OrtcStatsReportString      0xB0000068L
#define MSG_Event_OrtcStatsReportBool        0xB0000069L
#define MSG_Event_OrtcStatsReportCommand     0xB000006AL
#define MSG_Event_OrtcStatsReportMark        0xB000006BL
