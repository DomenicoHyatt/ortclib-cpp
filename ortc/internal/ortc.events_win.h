// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>

#ifndef _WIN32

#include "ortc.events.h"

#else

#include "ortc.events_win_etw.h"
#include <stdint.h>
#include <zsLib/eventing/Log.h>

namespace zsLib {
  namespace eventing {

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcLib() EventRegisterOrtcLib()
#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcLib() EventUnregisterOrtcLib()

#define ZS_INTERNAL_EVENTING_EVENT_CertificateCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteCertificateCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6), (xValue7), static_cast<int64_t>(xValue8), static_cast<int64_t>(xValue9), static_cast<int64_t>(xValue10)); }
#define ZS_INTERNAL_EVENTING_EVENT_CertificateDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteCertificateDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_CertificateFingerprint(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteCertificateFingerprint((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_CertificateGeneratedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteCertificateGeneratedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (bool)(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelBufferedAmountLowThresholdChanged(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelBufferedAmountLowThresholdChanged((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), (bool)(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelClose(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelClose((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDataChannelCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (bool)(xValue4), static_cast<uint16_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDataChannelDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelMessage(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelMessage((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint32_t>(xValue5), static_cast<int32_t>(xValue6), static_cast<size_t>(xValue8), reinterpret_cast<const BYTE *>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelOutgoingBufferPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), (bool)(xValue4), static_cast<int64_t>(xValue5), (bool)(xValue6), static_cast<uint64_t>(xValue7), static_cast<size_t>(xValue9), reinterpret_cast<const BYTE *>(xValue8)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacketDelivered(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelOutgoingBufferPacketDelivered((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), (bool)(xValue4), static_cast<int64_t>(xValue5), (bool)(xValue6), static_cast<uint64_t>(xValue7), static_cast<size_t>(xValue9), reinterpret_cast<const BYTE *>(xValue8)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlAck(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelReceivedControlAck((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelReceivedControlOpen((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (bool)(xValue2), static_cast<uint8_t>(xValue3), static_cast<uint8_t>(xValue4), static_cast<uint16_t>(xValue5), static_cast<uint32_t>(xValue6), static_cast<uint16_t>(xValue7), static_cast<uint16_t>(xValue8), (xValue9), (xValue10)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportDeliverOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportDeliverOutgoingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), (bool)(xValue4), static_cast<int64_t>(xValue5), (bool)(xValue6), static_cast<uint64_t>(xValue7), static_cast<size_t>(xValue9), reinterpret_cast<const BYTE *>(xValue8)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportReceivedIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint32_t>(xValue5), static_cast<int32_t>(xValue6), static_cast<size_t>(xValue8), reinterpret_cast<const BYTE *>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestNotifyClosed(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportRequestNotifyClosed((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestShutdown(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportRequestShutdown((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReady(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportSendReady((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReadyFailure(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportSendReadyFailure((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportStateChanged(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSCTPTransportStateChanged((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendBinary(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSendBinary((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlAck(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelSendControlAck((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint8_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelSendControlOpen((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint8_t>(xValue2), static_cast<uint8_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint32_t>(xValue5), static_cast<uint16_t>(xValue6), static_cast<uint16_t>(xValue7), (xValue8), (xValue9)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendString(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDataChannelSendString((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDataChannelStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDtlsTransportCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDtlsTransportErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardDataPacketToIceTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportForwardDataPacketToIceTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingEncryptedPacketToSrtpTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportForwardingEncryptedPacketToSrtpTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToDataTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportForwardingPacketToDataTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToRtpListener(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportForwardingPacketToRtpListener((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitialization(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportInitialization((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallCipher(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportInitializationInstallCipher((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallFingerprint(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportInitializationInstallFingerprint((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalIceStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportInternalIceStateChangeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDtlsTransportInternalSrtpTransportLifetimeRemainingEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalTimerEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportReceivedPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (bool)(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedStunPacket(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportReceivedStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportRoleSet(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportRoleSet((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendDataPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportSendDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendEncryptedRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportSendEncryptedRtpPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteDtlsTransportSendRtpPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSrtpKeyingMaterialSetup(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDtlsTransportSrtpKeyingMaterialSetup((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStart(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportStart((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDtlsTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteDtlsTransportStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStop(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteDtlsTransportStop((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererAddCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererAddCandidateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), reinterpret_cast<const void *>(xValue2), (xValue3), (xValue4), (xValue5), (xValue6), static_cast<uint64_t>(xValue7), static_cast<uint32_t>(xValue8), static_cast<uint32_t>(xValue9), (xValue10), (xValue11), static_cast<uint16_t>(xValue12), (xValue13), (xValue14), (xValue15), static_cast<uint16_t>(xValue16)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererBufferIceTransportIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), (bool)(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererBufferIceTransportIncomingStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4), (bool)(xValue5), (bool)(xValue6), static_cast<uint64_t>(xValue7), static_cast<uint64_t>(xValue8), static_cast<int64_t>(xValue9), static_cast<int64_t>(xValue10), static_cast<int64_t>(xValue11), static_cast<int64_t>(xValue12), static_cast<uint64_t>(xValue13), static_cast<uint64_t>(xValue14), static_cast<uint64_t>(xValue15), (bool)(xValue16)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreatedAssociateGatherer(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererCreatedAssociateGatherer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererDeliverIceTransportIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), (bool)(xValue5), static_cast<size_t>(xValue7), reinterpret_cast<const BYTE *>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererDeliverIceTransportIncomingStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), (bool)(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererDisposeBufferedIceTransportIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererDisposeBufferedIceTransportIncomingStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererErrorIceTransportIncomingStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererFilterCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererFilterCandidateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), reinterpret_cast<const void *>(xValue2), (xValue3), (xValue4), (xValue5), (xValue6), static_cast<uint64_t>(xValue7), static_cast<uint32_t>(xValue8), static_cast<uint32_t>(xValue9), (xValue10), (xValue11), static_cast<uint16_t>(xValue12), (xValue13), (xValue14), (xValue15), static_cast<uint16_t>(xValue16)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererGather(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererGather((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (bool)(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBind(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererHostPortBind((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBindFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererHostPortBindFailed((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortClose(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererHostPortClose((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortDestroy(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererHostPortDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallInterfaceNameMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererInitializeInstallInterfaceNameMapping((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallPreference(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererInitializeInstallPreference((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint32_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallIceTransport(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererInstallIceTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererInstallQuickRoute((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), reinterpret_cast<const void *>(xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalBackOffTimerStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalBackOffTimerStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalDnsLoookupCompleteEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererInternalDnsLoookupCompleteEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketExceptionEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalHostSocketExceptionEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketReadReadyEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalHostSocketReadReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalHostSocketWriteReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalIceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererInternalIceTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalLikelyReflexiveActivityEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalLikelyReflexiveActivityEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoveryCompleteEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererInternalStunDiscoveryCompleteEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoverySendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalStunDiscoverySendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketExceptionEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalTcpSocketExceptionEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketReadReadyEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalTcpSocketReadReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalTcpSocketWriteReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTurnSocketStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererInternalTurnSocketStateChangeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererPendingResolveHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererPendingResolveHostIP((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererReflexivePortCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortDestroy(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererReflexivePortDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortFoundMapped(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererReflexivePortFoundMapped((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRelayPortCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4), (xValue5), (xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortDestroy(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRelayPortDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortFoundIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRelayPortFoundIP((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRemoveCandidateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), reinterpret_cast<const void *>(xValue2), (xValue3), (xValue4), (xValue5), (xValue6), static_cast<uint64_t>(xValue7), static_cast<uint32_t>(xValue8), static_cast<uint32_t>(xValue9), (xValue10), (xValue11), static_cast<uint16_t>(xValue12), (xValue13), (xValue14), (xValue15), static_cast<uint16_t>(xValue16)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveIceTransport(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRemoveIceTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRemoveQuickRoute((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), reinterpret_cast<const void *>(xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemovetAllIceTransportRelatedRoutes(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererRemovetAllIceTransportRelatedRoutes((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveFoundHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererResolveFoundHostIP((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint64_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveHostIP(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererResolveHostIP((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererRouteTrace((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4), static_cast<int64_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint16_t>(xValue7), static_cast<uint16_t>(xValue8), static_cast<uint64_t>(xValue9), (xValue10), (xValue11), static_cast<uint32_t>(xValue12), static_cast<uint32_t>(xValue13), (xValue14), (xValue15), static_cast<uint16_t>(xValue16), (xValue17), (xValue18), (xValue19), static_cast<uint16_t>(xValue20)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererRouterCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererRouterCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceGathererRouterDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterInternalEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererRouterInternalEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint16_t>(xValue5), (xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererRouterRouteTrace((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), (xValue5), static_cast<uint32_t>(xValue6), static_cast<uint32_t>(xValue7), (xValue8), (xValue9), static_cast<uint16_t>(xValue10), (xValue11), (xValue12), (xValue13), static_cast<uint16_t>(xValue14), (xValue15)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSearchQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererSearchQuickRoute((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), reinterpret_cast<const void *>(xValue2), (xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererSendIceTransportPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererSendIceTransportPacketFailed((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTcp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererSendIceTransportPacketViaTcp((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTurn(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererSendIceTransportPacketViaTurn((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaUdp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererSendIceTransportPacketViaUdp((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), (xValue5), static_cast<size_t>(xValue7), reinterpret_cast<const BYTE *>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererTcpPortCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortDestroy(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceGathererTcpPortDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererTcpSocketPacketReceivedFrom((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketSentOutgoing(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererTcpSocketSentOutgoing((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererTurnSocketReceivedPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererTurnSocketSendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketForwardingToTurnSocket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererUdpSocketPacketForwardingToTurnSocket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (bool)(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererUdpSocketPacketReceivedFrom((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketSentTo(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceGathererUdpSocketPacketSentTo((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportAddRemoteCandidate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint64_t>(xValue5), static_cast<uint32_t>(xValue6), static_cast<uint32_t>(xValue7), (xValue8), (xValue9), static_cast<uint16_t>(xValue10), (xValue11), (xValue12), (xValue13), static_cast<uint16_t>(xValue14), (bool)(xValue15)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidateComplete(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportAddRemoteCandidateComplete((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportBufferingIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportBufferingIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCandidatePairChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportCandidatePairChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportControllerCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportControllerCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportControllerDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportAttachedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportControllerInternalTransportAttachedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), (bool)(xValue4), static_cast<uint64_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportDetachedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportControllerInternalTransportDetachedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportControllerInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerNoNeedToWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportControllerNoNeedToWaitUntilUnfrozen((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportControllerStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportControllerWaitUntilUnfrozen((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<int64_t>(xValue4), static_cast<int64_t>(xValue5), (bool)(xValue6), (bool)(xValue7), static_cast<int64_t>(xValue8), static_cast<int64_t>(xValue9), static_cast<uint64_t>(xValue10), static_cast<uint64_t>(xValue11)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreateAssociatedTransport(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportCreateAssociatedTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringBufferedIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportDeliveringBufferedIncomingPacketToSecureTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportDeliveringIncomingPacketToSecureTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingStunPacketToSecureTransport(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportDeliveringIncomingStunPacketToSecureTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDisposingBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportDisposingBufferedIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportForwardSecureTransportPacketToGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportForwardSecureTransportPacketToGatherer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportInstallFoundation((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundationDependencyFreezePromise(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInstallFoundationDependencyFreezePromise((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerAttachedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalControllerAttachedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerDetachedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalControllerDetachedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalDeliveryPendingPacketsEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportInternalDeliveryPendingPacketsEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateCompleteEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalGathererAddLocalCandidateCompleteEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalGathererAddLocalCandidateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4), static_cast<uint32_t>(xValue5), static_cast<uint32_t>(xValue6), (xValue7), (xValue8), static_cast<uint16_t>(xValue9), (xValue10), (xValue11), (xValue12), static_cast<uint16_t>(xValue13)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererRemoveLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalGathererRemoveLocalCandidateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4), static_cast<uint32_t>(xValue5), static_cast<uint32_t>(xValue6), (xValue7), (xValue8), static_cast<uint16_t>(xValue9), (xValue10), (xValue11), (xValue12), static_cast<uint16_t>(xValue13)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalGathererStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalRoleConflictDetectedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalRoleConflictDetectedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportAttachedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalSecureTransportAttachedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportDetachedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportInternalSecureTransportDetachedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterCreate(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportInternalStunRequesterCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponse(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalStunRequesterReceivedResponse((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponseMismatch(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalStunRequesterReceivedResponseMismatch((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalStunRequesterSendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterTimedOut(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalStunRequesterTimedOut((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalUnfrozenPromiseEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalUnfrozenPromiseEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportKeepWarm(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportKeepWarm((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedPacketFromGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportReceivedPacketFromGatherer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportReceivedStunPacketFromGatherer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportRemoveFoundation((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportRemoveRemoteCandidate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint64_t>(xValue5), static_cast<uint32_t>(xValue6), static_cast<uint32_t>(xValue7), (xValue8), (xValue9), static_cast<uint16_t>(xValue10), (xValue11), (xValue12), (xValue13), static_cast<uint16_t>(xValue14), (bool)(xValue15)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidateComplete(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportRemoveRemoteCandidateComplete((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRetryReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportRetryReceivedStunPacketFromGatherer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteStateTrackerStateCountChange(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportRouteStateTrackerStateCountChange((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37, xValue38, xValue39, xValue40, xValue41) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportRouteTrace((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4), (xValue5), (xValue6), (xValue7), static_cast<uint32_t>(xValue8), static_cast<uint32_t>(xValue9), (xValue10), (xValue11), static_cast<uint16_t>(xValue12), (xValue13), (xValue14), (xValue15), static_cast<uint16_t>(xValue16), (xValue17), (xValue18), static_cast<uint32_t>(xValue19), static_cast<uint32_t>(xValue20), (xValue21), (xValue22), static_cast<uint16_t>(xValue23), (xValue24), (xValue25), (xValue26), static_cast<uint16_t>(xValue27), static_cast<uint64_t>(xValue28), static_cast<uint64_t>(xValue29), static_cast<int64_t>(xValue30), static_cast<int64_t>(xValue31), static_cast<int64_t>(xValue32), static_cast<int64_t>(xValue33), (bool)(xValue34), (bool)(xValue35), static_cast<uint64_t>(xValue36), static_cast<uint64_t>(xValue37), (bool)(xValue38), static_cast<uint64_t>(xValue39), static_cast<int64_t>(xValue40), static_cast<int64_t>(xValue41)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSecureTransportSendPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportSecureTransportSendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSendStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteIceTransportSendStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteIceTransportStart((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (bool)(xValue3), (xValue4), (xValue5), (bool)(xValue6), (xValue7), (xValue8), (bool)(xValue9)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteIceTransportStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_OrtcCreate(xSubsystem) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteOrtcCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__); }
#define ZS_INTERNAL_EVENTING_EVENT_OrtcDestroy(xSubsystem) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteOrtcDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__); }
#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceGathererHostPortCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteOrtcIceGathererHostPortCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceTransportInternalWarmRoutesChangedEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteOrtcIceTransportInternalWarmRoutesChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_OrtcSrtpTransportInstallKeyingMaterial(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteOrtcSrtpTransportInstallKeyingMaterial((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), (xValue5), (xValue6), static_cast<uint16_t>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerBufferIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerBufferIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpListenerCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<int64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<int64_t>(xValue6), static_cast<int64_t>(xValue7), static_cast<int64_t>(xValue8)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpListenerDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDisposeBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerDisposeBufferedIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerFindMapping((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerForwardIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerForwardIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByMuxID(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerFoundMappingByMuxID((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerFoundMappingByPayloadType((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint8_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerFoundMappingBySsrc((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerReceivedIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerRegisterHeaderExtension((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<uint16_t>(xValue4), (bool)(xValue5), static_cast<uint64_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterReceiver(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerRegisterReceiver((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerSsrcTableEntryAdded((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), static_cast<int64_t>(xValue4), (xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerSsrcTableEntryRemoved((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), static_cast<int64_t>(xValue4), (xValue5), (xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpListenerSsrcTableEntryUpdated((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), static_cast<int64_t>(xValue4), (xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerUnhandledEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint32_t>(xValue4), static_cast<uint8_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerUnregisterHeaderExtension((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<uint16_t>(xValue4), (bool)(xValue5), static_cast<uint64_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterReceiver(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerUnregisterReceiver((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterSender(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpListenerUnregisterSender((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpMediaEngineCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpMediaEngineDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceivedIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverAddChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverAddContributingSource((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint32_t>(xValue2), static_cast<uint8_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverChannelCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverChannelCreateMediaChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverChannelDeliverIncomingPacketToMediaChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverChannelDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverChannelInternalSecureTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalUpdateEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverChannelInternalUpdateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverChannelSendOutgoingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCloseChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverCloseChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint64_t>(xValue7), static_cast<int64_t>(xValue8), static_cast<int64_t>(xValue9), static_cast<int64_t>(xValue10), static_cast<int64_t>(xValue11), static_cast<int64_t>(xValue12)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreateChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverCreateChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverDeliverIncomingPacketToChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverFindMapping((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverFoundMappingByPayloadType((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint8_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByRid(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverFoundMappingByRid((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverFoundMappingBySsrc((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalChannelGoneEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverInternalChannelGoneEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverInternalSecureTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalTimerEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReceive(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverReceive((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverRegisterHeaderExtension((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint16_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverRemoveChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverRemoveContributingSource((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint32_t>(xValue2), static_cast<uint8_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportCodec(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverReportCodec((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint8_t>(xValue4), static_cast<int64_t>(xValue5), static_cast<int64_t>(xValue6), static_cast<uint64_t>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverReportHeaderExtension((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint16_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportRtcpFeedback(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverReportRtcpFeedback((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverSendOutgoingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverSetTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverSsrcTableEntryAdded((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), static_cast<uint32_t>(xValue4), static_cast<int64_t>(xValue5), (xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverSsrcTableEntryRemoved((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), static_cast<uint32_t>(xValue4), static_cast<int64_t>(xValue5), (xValue6), (xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverSsrcTableEntryUpdated((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), static_cast<uint32_t>(xValue4), static_cast<int64_t>(xValue5), (xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStop(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpReceiverStop((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverTrackActiveChannelChangedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverTrackActiveChannelChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverUnhandledEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint32_t>(xValue4), static_cast<uint8_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpReceiverUpdateChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpReceiverUpdateContributingSource((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint32_t>(xValue2), static_cast<uint8_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAddChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderAddChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAttachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderAttachTrackSenderChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelChangeTrack(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderChannelChangeTrack((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderChannelCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderChannelCreateMediaChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpSenderChannelDeliverIncomingPacketToMediaChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderChannelDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderChannelInternalSecureTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalUpdateEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderChannelInternalUpdateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpSenderChannelSendOutgoingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpSenderDeliverIncomingPacketToChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDetachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderDetachTrackSenderChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpSenderIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalChannelGoneEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderInternalChannelGoneEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalDestroyChannelEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderInternalDestroyChannelEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderInternalSecureTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderRemoveChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderRemoveChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSend(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderSend((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteRtpSenderSendOutgoingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTrack(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderSetTrack((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderSetTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSsrcConflictEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderSsrcConflictEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint32_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStop(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteRtpSenderStop((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderUpdateChannel(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteRtpSenderUpdateChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpInitCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpInitCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpInitDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpInitDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportBufferIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportBufferIncomingDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), (bool)(xValue4), static_cast<uint16_t>(xValue5), static_cast<uint16_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDataChannelEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportDataChannelEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDeliverIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportDeliverIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint32_t>(xValue5), static_cast<int32_t>(xValue6), static_cast<size_t>(xValue8), reinterpret_cast<const BYTE *>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDisposeBufferedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportDisposeBufferedIncomingDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportErrorEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportInternalSecureTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalShutdownEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportInternalShutdownEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalWakeEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportInternalWakeEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSctpTransportListenerCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint16_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDeliverIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportListenerDeliverIncomingDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerListen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerListen((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint16_t>(xValue5), static_cast<uint16_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportListenerReceivedIncomingDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerRegisterNewTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerRegisterNewTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportCreatedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerSctpTransportCreatedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerSctpTransportEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportShutdownEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportListenerSctpTransportShutdownEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSctpTransportListenerStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportReceivedIncomingDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportReceivedIncomingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint32_t>(xValue4), static_cast<int32_t>(xValue5), static_cast<size_t>(xValue7), reinterpret_cast<const BYTE *>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportRegisterNewDataChannel(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportRegisterNewDataChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportSendOutgoingDataPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSctpTransportSendOutgoingPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint16_t>(xValue2), (bool)(xValue3), static_cast<int64_t>(xValue4), (bool)(xValue5), static_cast<uint64_t>(xValue6), static_cast<size_t>(xValue8), reinterpret_cast<const BYTE *>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportShutdownDataChannel(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportShutdownDataChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportStart((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint16_t>(xValue5), static_cast<uint16_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStep(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSctpTransportStep((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStop(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSctpTransportStop((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportCreate(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSrtpTransportCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDeliverIncomingDecryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSrtpTransportDeliverIncomingDecryptedPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSrtpTransportDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportReceivedIncomingEncryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSrtpTransportReceivedIncomingEncryptedPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSrtpTransportSendOutgoingEncryptedPacketViaSecureTransport((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingPacketAndEncrypt(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSrtpTransportSendOutgoingPacketAndEncrypt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_cRtpListenerRegisterSender(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWritecRtpListenerRegisterSender((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

