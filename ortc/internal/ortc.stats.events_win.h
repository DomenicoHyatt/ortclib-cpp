// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>

#ifndef _WIN32

#include "ortc.stats.events.h"

#else

#include "ortc.stats.events_win_etw.h"
#include <stdint.h>
#include <zsLib/eventing/Log.h>

namespace zsLib {
  namespace eventing {

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcLibStatsReport() EventRegisterOrtcLibStatsReport()
#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcLibStatsReport() EventUnregisterOrtcLibStatsReport()

#define ZS_INTERNAL_EVENTING_EVENT_OrtcStatsReportCommand(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteOrtcStatsReportCommand((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_StatsReportBool(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStatsReportBool((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), static_cast<double>(xValue2), (xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_StatsReportFloat(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStatsReportFloat((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), static_cast<double>(xValue2), (xValue3), static_cast<float>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_StatsReportInt32(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStatsReportInt32((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), static_cast<double>(xValue2), (xValue3), static_cast<int32_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_StatsReportInt64(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStatsReportInt64((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), static_cast<double>(xValue2), (xValue3), static_cast<int64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_StatsReportString(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStatsReportString((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), static_cast<double>(xValue2), (xValue3), (xValue4)); }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

