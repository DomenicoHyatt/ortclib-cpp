/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    /// <summary>
    /// The RTCRtpContributingSource and RTCRtpSynchronizationSource
    /// dictionaries contain information about a given contributing
    /// source (CSRC) or synchronization source (SSRC) respectively,
    /// including the most recent time a packet that the source
    /// contributed to was played out.
    /// </summary>
    [dictionary]
    struct RTCRtpContributingSource {
      [constructor, default, delete]
      void RTCRtpContributingSource();

      /// <summary>
      /// Get or sets the timestamp indicating the most recent time
      /// of playout of media that arrived in an RTP packet
      /// originating from this source. The timestamp is
      // defined as performance.timeOrigin + performance.now()
      /// at the time of playout.
      /// </summary>
      Milliseconds timestamp;
      /// <summary>
      /// Gets or sets the CSRC or SSRC identifier of the
      /// contributing or synchronization source.
      /// </summary>
      uint32       source;
      /// <summary>
      /// Gets or sets the audio level. This is a value between 0..1
      /// (linear), where 1.0 represents 0 dBov, 0 represents silence,
      /// and 0.5 represents approximately 6 dBSPL change in the sound pressure level from 0 dBov.
      ///
      /// For CSRCs, this MUST be converted from the level value defined in
      /// [RFC6465] if the RFC 6465 header extension is present, otherwise this
      /// member MUST be absent.
      ///
      /// For SSRCs, this MUST be converted from the level value defined
      /// in [RFC6464] if the RFC 6464 header extension is present,
      /// otherwise the user agent must compute the value from the
      /// audio data (the member must never be absent).
      ///
      /// Both RFCs define the level as an integral value from 0 to
      /// 127 representing the audio level in negative decibels
      /// relative to the loudest signal that the system could
      /// possibly encode. Thus, 0 represents the loudest signal the
      /// system could possibly encode, and 127 represents silence.
      ///
      /// To convert these values to the linear 0..1 range, a value
      /// of 127 is converted to 0, and all other values are converted
      /// using the equation: 10^(-rfc_level/20).
      /// </summary>
      double       audioLevel;
    };

    /// <summary>
    /// The RTCRtpContributingSource and RTCRtpSynchronizationSource
    /// dictionaries contain information about a given contributing
    /// source (CSRC) or synchronization source (SSRC) respectively,
    /// including the most recent time a packet that the source
    /// contributed to was played out.
    /// </summary>
    [dictionary]
    struct  RTCRtpSynchronizationSource : RTCRtpContributingSource {
      [constructor, default, delete]
      void RTCRtpSynchronizationSource();

      /// <summary>
      /// Gets or sets whether the last RTP packet played from
      /// this source contains voice activity (true) or not
      /// (false). If the RFC 6464 extension header was not
      /// present, or if the peer has signaled that it is not
      /// using the V bit by setting the "vad" extension attribute
      /// to "off", as described in [RFC6464], Section 4,
      /// voiceActivityFlag will be absent.
      /// </summary>
      [optional]
      bool voiceActivityFlag;
    };

    /// <summary>
    /// The RTCRtpReceiver interface allows an application to
    /// inspect the receipt of a MediaStreamTrack.
    /// </summary>
    [disposable]
    interface RTCRtpReceiver
    {
      [constructor, delete]
      void RTCRtpReceiver();

      /// <summary>
      /// The getCapabilities() method returns the most optimistic view of the
      /// capabilities of the system for receiving media of the given kind. It does
      /// not reserve any resources, ports, or other state but is meant to provide
      /// a way to discover the types of capabilities of the browser including
      /// which codecs may be supported. User agents MUST support kind values
      /// of "audio" and "video". If the system has no capabilities corresponding
      /// to the value of the kind argument, getCapabilities returns null.
      /// <summary>
      [static]
      RTCRtpCapabilities getCapabilities(string kind);

      /// <summary>
      /// Gets the  attribute for the track that is associated with
      /// this RTCRtpReceiver object receiver.
      /// 
      /// Note that track.stop() is final, although clones are not
      /// affected. Since receiver.track.stop() does not implicitly
      /// stop receiver, Receiver Reports continue to be sent. On
      /// getting, the attribute MUST return the value of the
      /// [[ReceiverTrack]] slot.
      /// </summary>
      [getter]
      MediaStreamTrack  track;
      /// <summary>
      /// The getParameters() method returns the RTCRtpReceiver
      /// object's current parameters for how track is decoded.
      /// </summary>
      RTCRtpReceiveParameters       getParameters();
      /// <summary>
      /// Returns an RTCRtpContributingSource for each unique
      /// CSRC identifier received by this RTCRtpReceiver in the last 10 seconds.
      /// </summary>
      RTCRtpContributingSources     getContributingSources();
      /// <summary>
      /// Returns an RTCRtpSynchronizationSource for each unique
      /// SSRC identifier received by this RTCRtpReceiver in the last 10 seconds.
      /// </summary>
      RTCRtpSynchronizationSources  getSynchronizationSources();
    };
  }
}
