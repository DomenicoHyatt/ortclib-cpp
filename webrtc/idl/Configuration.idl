
/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace webRtc
  {

    /// <summary>
    /// The RTCConfiguration defines a set of parameters to configure how the
    /// peer-to-peer communication established via RTCPeerConnection is established
    /// or re-established.
    /// </summary>
    [dictionary]
    struct RTCConfiguration
    {
      [getter, setter]
      bool                  dscp;

      [getter, setter]
      bool                  cpuAdaptation;

      [getter, setter]
      bool                  suspendBelowMinBitrate;

      [getter, setter]
      bool                  prerendererSmoothing;

      [getter, setter]
      bool                  experimentCpuLoadEstimator;

      /// <summary>
      /// Gets or sets an array of objects describing servers
      /// available to be used by ICE, such as STUN and TURN servers.
      /// </summary>
      RTCIceServers         iceServers;

      /// <summary>
      /// Gets or sets which candidates the ICE Agent is allowed to use.
      /// </summary>
      RTCIceTransportPolicy  iceTransportPolicy = all;

      /// <summary>
      /// Gets or sets which media-bundling policy to use when gathering ICE candidates.
      /// </summary>
      RTCBundlePolicy       bundlePolicy = balanced;

      /// <summary>
      /// Gets or sets which which rtcp-mux policy to use when gathering ICE candidates.
      /// </summary>
      RTCRtcpMuxPolicy      rtcpMuxPolicy = require;

      /// <summary>
      /// Gets or sets a set of certificates that the RTCPeerConnection uses to authenticate.
      /// </summary>
      RTCCertificates       certificates;

      /// <summary>
      /// Gets or sets the target peer identity for the RTCPeerConnection.
      /// </summary>
      string                peerIdentity;

      /// <summary>
      /// Gets or sets the size of the prefetched ICE pool as defined in
      /// [JSEP] (section 3.5.4. and section 4.1.1.).
      /// </summary>
      uint8                 iceCandidatePoolSize;

      /// <summary>
      /// Gets or sets if should not gather IPv6 candidates.
      /// If set to true, don't gather IPv6 ICE candidates.
      /// </summary>
      bool                  disableIpv6 = false;

      /// <summary>
      /// Gets or sets if IPv6 should be gathered on WiFi.
      /// If set to true, don't gather IPv6 ICE candidates on Wi-Fi.
      /// Only intended to be used on specific devices. Certain phones disable IPv6
      /// when the screen is turned off and it would be better to just disable the
      /// IPv6 ICE candidates on Wi-Fi in those cases.
      /// </summary>
      bool                  disableIpv6OnWifi = false;

      /// <summary>
      /// Gets or sets a limited number of IPv6 network interfaces the
      /// PeerConnection will use, in order to avoid too many ICE candidate
      /// pairs being created and delaying ICE completion.
      /// </summary>
      [optional]
      int                   maxIpv6Networks = 5;

      /// <summary>
      /// Gets or sets a flag to exclude link-local network interfaces
      /// from considertaion for gathering ICE candidates.
      /// </summary>
      bool                  disableLinkLocalNetworks = false;

      /// <summary>
      /// Gets or sets a flag to use RTP data channels instead of SCTP.
      /// </summary>
      bool                  enableRtpDataChannel = false;

      /// <summary>
      /// Gets or sets the minimum bitrate at which screencast video
      /// tracks will be encoded at. This means adding padding bits up
      /// to this bitrate, which can help when switching from a static
      /// scene to one with motion.
      /// </summary>
      [optional]
      int                   screencastMinBitrate;

      /// <summary>
      /// Gets or sets a flag to use new combined audio/video
      /// bandwidth estimation.
      /// </summary>
      [optional]
      bool                  combinedAudioVideoBwe;

      /// <summary>
      /// Gets or sets a flag to disable DTLS-SRTP. This should never be
      /// done, but can be useful for testing purposes, for example in
      /// setting up a loopback call with a single PeerConnection.
      /// </summary>
      [optional]
      bool                  enableDtlsSrtp;

      /// <summary>
      /// Gets or sets a policy to enable or disable TCP candidate generation.
      /// </summary>
      RTCTcpCandidatePolicy tcpCandidatePolicy = enabled;

      /// <summary>
      /// Gets or sets a policy which can be used to avoid gathering candidates
      /// for a "higher cost" network, if a lower cost one exists. For example,
      /// if both Wi-Fi and cellular interfaces are available, this could be
      /// used to avoid using the cellular interface.
      /// </summary>
      RTCCandidateNetworkPolicy candidateNetworkPolicy = all;

      /// <summary>
      /// Gets or sets the maximum number of packets that can be stored
      /// in the NetEq audio jitter buffer. Can be reduced to lower
      /// tolerated audio latency.
      /// </summary>
      int                   audioJitterBufferMaxPackets = 50;

      /// <summary>
      /// Gets or sets whether to use the NetEq "fast mode" which will
      /// accelerate audio quicker if it falls behind.
      /// </summary>
      bool                  audioJitterBufferFastAccelerate = false;

      /// <summary>
      /// Gets or sets the timeout in milliseconds before an ICE candidate
      /// pair is considered to be "not receiving", after which a lower
      /// priority candidate pair may be selected.
      /// </summary>
      Milliseconds          iceConnectionReceivingTimeout;

      /// <summary>
      /// Gets or sets the interval in milliseconds at which an ICE
      /// "backup" candidate pair will be pinged. This is a candidate pair
      /// which is not actively in use, but may be switched to if the active
      /// candidate pair becomes unusable.
      ///
      /// This is relevant mainly to Wi-Fi/cell handoff; the application may not
      /// want this backup cellular candidate pair pinged frequently, since it
      /// consumes data/battery.
      /// </summary>
      Milliseconds          iceBackupCandidatePairPingInterval;

      /// <summary>
      /// Gets or sets a flag that can be used to enable continual gathering,
      /// which means new candidates will be gathered as network interfaces
      /// change. Note that if continual gathering is used, the candidate
      /// removal API should also be used, to avoid an ever-growing list of
      /// candidates.
      /// </summary>
      RTCContinualGatheringPolicy continualGatheringPolicy = once;

      /// <summary>
      /// Gets or sets a flag that if set to true, candidate pairs will
      /// be pinged in order of most likely to work (which means using a
      /// TURN server, generally), rather than in standard priority order.
      /// </summary>
      bool                  prioritizeMostLikelyIceCandidatePairs = false;

      /// <summary>
      /// Gets or sets a flag that if set to true, this means the ICE transport
      /// should presume TURN-to-TURN candidate pairs will succeed, even before
      /// a binding response is received. This can be used to optimize the initial
      /// connection time, since the DTLS handshake can begin immediately.
      /// </summary>
      bool                  pruneTurnPorts = false;

      /// <summary>
      /// Gets or sets a flag that if true, "renomination" will be added
      /// to the ice options in the transport description.
      /// See: https://tools.ietf.org/html/draft-thatcher-ice-renomination-00
      /// </summary>
      bool                  enableIceRenomination = false;

      /// <summary>
      /// Gets or sets a flag that if true, the ICE role is re-determined
      /// when the PeerConnection sets a local transport description that
      /// indicates an ICE restart.
      ///
      /// This is standard RFC5245 ICE behavior, but causes unnecessary role
      /// thrashing, so an application may wish to avoid it. This role
      /// re-determining was removed in ICEbis (ICE v2).
      /// </summary>
      bool                  redetermineRoleOnIceRestart = true;

      /// <summary>
      /// Gets or sets the min interval (max rate) at which we will send ICE checks
      /// (STUN pings), in milliseconds.
      /// </summary>
      Milliseconds          iceCheckMinInterval;

      /// <summary>
      /// Gets or sets the interval in milliseconds at which STUN candidates will
      /// resend STUN binding requests to keep NAT bindings open.
      /// </summary>
      Milliseconds          stunCandidateKeepaliveInterval;

      /// <summary>
      /// Gets or sets if WebRTC will periodically create and propose candidates without
      /// starting a new ICE generation. The regathering happens continuously with
      /// interval specified in milliseconds by the uniform distribution [a, b].
      /// </summary>
      [optional]
      MillisecondIntervalRange iceRegatherIntervalRange;

      /// <summary>
      /// Gets or sets the preferred network interface. A candidate pair on a
      /// preferred network has a higher precedence in ICE than one on an
      /// un-preferred network, regardless of priority or network cost.
      /// </summary>
      [optional]
      RTCNetworkType          networkPreference;

      /// <summary>
      /// Gets or sets the SDP semantics used by this PeerConnection.
      /// Note that the WebRTC 1.0 specification requires kUnifiedPlan semantics.
      /// The RtpTransceiver API is only available with kUnifiedPlan semantics.
      ///
      /// kPlanB will cause PeerConnection to create offers and answers with at
      /// most one audio and one video m= section with multiple RtpSenders and
      /// RtpReceivers specified as multiple a=ssrc lines within the section. This
      /// will also cause PeerConnection to ignore all but the first m= section of
      /// the same media type.
      ///
      /// kUnifiedPlan will cause PeerConnection to create offers and answers with
      /// multiple m= sections where each m= section maps to one RtpSender and one
      /// RtpReceiver (an RtpTransceiver), either both audio or both video. This
      /// will also cause PeerConnection to ignore all but the first a=ssrc lines
      /// that form a Plan B stream.
      ///
      /// For users who only send at most one audio and one video track, this
      /// choice does not matter and should be left as kDefault.
      ///
      /// For users who wish to send multiple audio/video streams and need to stay
      /// interoperable with legacy WebRTC implementations, specify kPlanB.
      ///
      /// For users who wish to send multiple audio/video streams and/or wish to
      /// use the new RtpTransceiver API, specify kUnifiedPlan.
      /// </summary>
      RTCSdpSemantics         sdpSemantics = default;

      /// <summary>
      /// Constructs an empty instance of an RTCConfiguration object.
      /// </summary>
      [constructor, default]
      void RTCConfiguration();

      [constructor, altname(RTCConfigurationCreateWithType)]
      void RTCConfiguration(RTCConfigurationType type);

      /// <summary>
      /// Constructs an instance of an RTCConfiguration object by cloning the data from an existing object.
      /// </summary>
      [constructor, default, altname(RTCConfigurationClone)]
      void RTCConfiguration(RTCConfiguration source);

    };

  }
}
