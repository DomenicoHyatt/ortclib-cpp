/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    [dictionary]
    struct RTCIceCandidateInit {
        /// <summary>
        /// This carries the candidate-attribute as defined in section 15.1 of [ICE].
        /// If this represents an end-of-candidates indication, candidate is an empty string.
        /// <summary>
        string          candidate;
        string          sdpMid;
        [optional]
        unsigned short  sdpMLineIndex;
        string          usernameFragment;
    };

    /// <summary>
    /// This interface describes an ICE candidate, described in [ICE]
    /// Section 2. Other than candidate, sdpMid, sdpMLineIndex, and
    /// usernameFragment, the remaining attributes are derived from
    /// parsing the candidate member in candidateInitDict, if it is
    /// well formed.
    /// </summary>
    interface RTCIceCandidate
    {
      /// <summary>
      /// Gets the candidate-attribute as defined in section 15.1 of
      /// [ICE]. If this RTCIceCandidate represents an end-of-candidates
      /// indication, candidate is an empty string.
      /// </summary>
      [getter]
      string                  candidate;

      /// <summary>
      /// Gets the media stream "identification-tag" defined in [RFC5888]
      /// for the media component this candidate is associated with if set.
      /// </summary>
      [getter]
      string                  sdpMid;

      /// <summary>
      /// Gets the index (starting at zero) of the media description in the
      /// SDP this candidate is associated with if set.
      /// </summary>
      [optional, getter]
      unsigned short          sdpMLineIndex;

      /// <summary>
      /// Gets a unique identifier that allows ICE to correlate candidates
      /// that appear on multiple RTCIceTransports.
      /// </summary>
      [getter]
      string                  foundation;

      /// <summary>
      /// Gets the assigned network component of the candidate (rtp or rtcp).
      /// This corresponds to the component-id field in candidate-attribute,
      /// decoded to the string representation as defined in RTCIceComponent.
      /// </summary>
      [optional, getter]
      RTCIceComponent         component;

      /// <summary>
      /// Gets the assigned priority of the candidate.
      /// </summary>
      [optional, getter]
      unsigned long           priority;

      /// <summary>
      /// Gets the IP address of the candidate. This corresponds to the
      /// connection-address field in candidate-attribute.
      /// </summary>
      [getter]
      string                  ip;

      /// <summary>
      /// Gets the protocol of the candidate (udp/tcp). This corresponds
      /// to the transport field in candidate-attribute.
      /// </summary>
      [optional,getter]
      RTCIceProtocol          protocol;

      /// <summary>
      /// Gets the port of the candidate.
      /// </summary>
      [optional,getter]
      uint16                  port;

      /// <summary>
      /// Gets the type of the candidate. This corresponds to the
      /// candidate-types field in candidate-attribute.
      /// </summary>
      [optional,getter]
      RTCIceCandidateType     type;

      /// <summary>
      /// Gets the representation of TCP type candidate. Otherwise, tcpType is not set.
      /// This corresponds to the tcp-type field in candidate-attribute.
      /// </summary>
      [optional,getter]
      RTCIceTcpCandidateType  tcpType;

      /// <summary>
      /// Gets a related address for candidate that is derived from another, such
      /// as a relay or reflexive candidate, the relatedAddress is the IP address of
      /// the candidate that it is derived from. For host candidates, the
      /// relatedAddress is empty. This corresponds to the rel-address field in
      /// candidate-attribute.
      /// </summary>
      [getter]
      string                  relatedAddress;

      /// <summary>
      /// Gets a related port for a candidate that is derived from another, such
      /// as a relay or reflexive candidate, the relatedPort is the port of the
      /// candidate that it is derived from. For host candidates, the relatedPort
      /// is empty. This corresponds to the rel-port field in candidate-attribute.
      /// </summary>
      [getter,optional]
      uint16                  relatedPort;

      /// <summary>
      /// Gets the ufrag as defined in section 15.4 of [ICE].
      /// </summary>
      [getter]
      string                  usernameFragment;

      /// <summary>
      /// Constructs an empty instance of an RTCIceCandidate object.
      /// </summary>
      [constructor, default]
      void RTCIceCandidate();
      /// <summary>
      /// Constructs an instance of an RTCIceCandidate object by extracting object data from a JSON object.
      /// </summary>
      [constructor, default, altname(RTCIceCandidateWithInit)]
      void RTCIceCandidate(RTCIceCandidateInit init) throws (RTCError);

      /// <summary>
      /// To invoke the toJSON() operation of the RTCIceCandidate interface.
      /// </summary>
      RTCIceCandidateInit toJson();
    };
  }
}
