/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace webRtc
  {
    /// <summary>
    /// An RTCDataChannel can be configured to operate in different
    /// reliability modes. A reliable channel ensures that the data is
    /// delivered at the other peer through retransmissions. An unreliable
    /// channel is configured to either limit the number of retransmissions
    /// (maxRetransmits ) or set a time during which transmissions (including
    /// retransmissions) are allowed (maxPacketLifeTime). These properties
    /// can not be used simultaneously and an attempt to do so will result in
    /// an error. Not setting any of these properties results in a reliable
    /// channel.
    /// </summary>
    [dictionary]
    struct RTCDataChannelInit
    {
      /// <summary>
      /// Gets or sets the if the RTCDataChannel is ordered, and false if out
      /// of order delivery is allowed.
      /// </summary>
      bool              ordered = true;
      /// <summary>
      /// Gets or sets the maxPacketLifetime attribute represents the length
      /// of the time window (in milliseconds) during which retransmissions
      /// may occur in unreliable mode. A value of 0 means not used.
      /// </summary>
      [optional]
      Milliseconds      maxPacketLifetime;
      /// <summary>
      /// Gets or sets the maxRetransmits attribute returns the maximum number
      /// of retransmissions that are attempted in unreliable mode if set.
      /// </summary>
      [optional]
      uint32            maxRetransmits;
      /// <summary>
      /// Custom definition of the protocol being carried over the data channel.
      /// </summary>
      string            protocol;
      /// <summary>
      /// Gets or sets an indicator if the this RTCDataChannel was negotiated
      /// by the application. If true, the application negotiated the
      /// RTCDataChannel, otherwise the value is false.
      /// </summary>
      bool              negotiated;
      /// <summary>
      /// The id attribute returns the id for this RTCDataChannel if set.
      /// </summary>
      [optional]
      uint16            id;

      /// <summary>
      /// Constructs an instance of an RTCDataChannelInit instance.
      /// </summary>
      [constructor, default]
      void RTCDataChannelInit();
      /// <summary>
      /// Constructs an instance of an RTCDataChannelInit instance cloning from an existing instance.
      /// </summary>
      [constructor, altname(RTCDataChannelInitClone)]
      void RTCDataChannelInit(RTCDataChannelInit source);
    };

    /// <summary>
    /// The datachannel event uses the RTCDataChannelEvent interface.
    /// </summary>
    interface RTCDataChannelEvent {
      [constructor, delete, default]
      void RTCDataChannelEvent();
      
      /// <summary>
      /// Gets the channel attribute representing the RTCDataChannel object associated with the event.
      /// </summary>
      [getter]
      RTCDataChannel channel;
    };

    /// <summary>
    /// MessageEvent represents the event data when a message from the
    /// RTCDataChannel is fired.
    /// </summary>
    struct MessageEvent
    {
      [constructor, delete]
      void MessageEvent();

      /// <summary>
      /// Gets the binary message being sent. Only set if the data was binary.
      /// </summary>
      [getter]
      binary binary;

      /// <summary>
      /// Gets the binary message being sent. Only set if the data was text.
      /// </summary>
      [getter]
      string text;
    };

    /// <summary>
    /// An RTCDataChannel class instance allows sending data messages to/from
    /// the remote peer.
    /// </summary>
    [disposable]
    interface RTCDataChannel : RTCStatsProvider
    {
      [constructor, delete, default]
      void RTCDataChannel();

      /// <summary>
      /// Gets the attribute representing the ID for this RTCDataChannel.
      /// The value is initally null, which is what will be returned if
      /// the ID was not provided at channel creation time, and the DTLS
      /// role of the SCTP transport has not yet been negotiated.
      /// Otherwise, it will return the ID that was either selected by
      /// the script or generated by the user agent according to
      /// [RTCWEB-DATA-PROTOCOL]. After the ID is set to a non-null
      /// value, it will not change. On getting, the attribute MUST
      /// return the value of the [[DataChannelId]] slot.
      /// </summary>
      [getter]
      unsigned short id;

      /// <summary>
      /// Gets the attribute representing a label that can be used to
      /// distinguish this RTCDataChannel object from other RTCDataChannel
      /// objects. Scripts are allowed to create multiple RTCDataChannel
      /// objects with the same label. On getting, the attribute MUST
      /// return the value of the [[DataChannelLabel]] slot.
      /// </summary>
      [getter]
      string label;

      /// <summary>
      /// Gets the attribute where true means the RTCDataChannel is ordered, and
      /// false means other of order delivery is allowed. On getting,
      /// the attribute MUST return the value of the [[Ordered]] slot.
      /// </summary>
      [getter]
      bool ordered;

      /// <summary>
      /// Gets the attribute representing the length of the time window
      /// (in milliseconds) during which transmissions and retransmissions
      /// may occur in unreliable mode. On getting, the attribute MUST
      /// return the value of the [[MaxPacketLifeTime]] slot.
      /// </summary>
      [getter, optional]
      Milliseconds maxPacketLifeTime;

      /// <summary>
      /// Gets the attribute representing the maximum number of retransmissions
      /// that are attempted in unreliable mode. On getting, the attribute MUST
      /// return the value of the [[MaxRetransmits]] slot.
      /// </summary>
      [getter, optional]
      unsigned short maxRetransmits;

      /// <summary>
      /// Gets thel attribute representing the name of the sub-protocol used
      /// with this RTCDataChannel. On getting, the attribute MUST return
      /// the value of the [[DataChannelProtocol]] slot.
      /// </summary>
      [getter]
      string protocol;

      /// <summary>
      /// Gets the attribute returning true if this RTCDataChannel was negotiated
      /// by the application, or false otherwise. On getting, the attribute MUST
      /// return the value of the [[Negotiated]] slot.
      /// </summary>
      [getter]
      bool negotiated;

      /// <summary>
      /// Gets the attribute representing the priority for this RTCDataChannel.
      /// The priority is assigned by the user agent at channel creation time.
      /// On getting, the attribute MUST return the value of the
      /// [[DataChannelPriority]] slot.
      /// </summary>
      [getter]
      RTCPriorityType  priority;

      /// <summary>
      /// Gets the readyState representing the state of the RTCDataChannel
      /// object. On getting, the attribute MUST return the value of the
      /// [[ReadyState]] slot.
      /// </summary>
      [getter]
      RTCDataChannelState readyState;

      /// <summary>
      /// Gets the number of bytes of application data (UTF-8 text and binary
      /// data) that have been queued using send() but that, as of the last
      /// time the event loop started executing a task, had not yet been
      /// transmitted to the network.
      /// </summary>
      [getter]
      size_t bufferedAmount;

      /// <summary>
      /// Gets or sets the threshold at which the BufferedAmount is considered
      /// to be low. When the bufferedAmount decreases from above this
      /// threshold to equal or below it, the bufferedamountlow event fires.
      /// The bufferedAmountLowThreshold is initially zero on each new
      /// RTCDataChannel, but the application may change its value at any
      /// time.
      /// </summary>
      [getter, setter]
      size_t bufferedAmountLowThreshold;

      /// <summary>
      /// Gets or sets the binaryType attribute. On getting, return the value
      /// to which it was last set. On setting, the user agent must set the
      /// IDL attribute to the new value. When an RTCDataChannel object is
      /// constructed, the binaryType attribute must be initialized to the
      /// string 'blob'. This attribute controls how binary data is exposed to
      /// scripts.
      /// </summary>
      [getter, setter]
      string binaryType;

      /// <summary>
      /// Closes the RTCDataChannel.
      /// </summary>
      void close();

      /// <summary>
      /// The Send() method is overloaded to handle different data argument
      /// types. This Send() method transmits a string to the remote peer.
      /// </summary>
      [default, altname(sendWithString)]
      void send(string text) throws (RTCError);
      /// <summary>
      /// The Send() method is overloaded to handle different data argument
      /// types. This Send() method transmits a binary blob to the remote
      /// peer.
      /// </summary>
      [altname(sendWithBinary)]
      void send(binary data) throws (RTCError);

      /// <summary>
      /// The event handler when the state of the RTCDataChannel is open.
      /// </summary>
      [event]
      void onOpen();

      /// <summary>
      /// The event handler when the state of the RTCDataChannel is closed.
      /// </summary>
      [event]
      void onClose();

      /// <summary>
      /// The error event handler for the RTCDataChannel.
      /// </summary>
      [event]
      void onError(RTCError event);

      /// <summary>
      /// The event handler when the BufferedAmount falls below the
      /// BufferedAmountLowThreshold.
      /// </summary>
      [event]
      void onBufferedAmountLow();

      /// <summary>
      /// The event handler when data from the remote peer arrives.
      /// </summary>
      [event]
      void onMessage(MessageEvent event);
    };
  }
}
