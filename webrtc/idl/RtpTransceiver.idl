/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    /// <summary>
    /// The RTCRtpTransceiver interface represents a combination
    /// of an RTCRtpSender and an RTCRtpReceiver that share a
    /// common mid. As defined in [JSEP] (section 3.4.1.), an
    /// RTCRtpTransceiver is said to be associated with a media
    /// description if its mid property is non-null; otherwise
    /// it is said to be disassociated. Conceptually, an
    /// associated transceiver is one that's represented in the
    /// last applied session description.
    /// </summary>
    [disposable]
    interface RTCRtpTransceiver
    {
      [constructor, delete]
      void RTCRtpTransceiver();

      /// <summary>
      /// Gets the mid attribute is the mid negotatiated and present
      /// in the local and remote descriptions as defined in
      /// [JSEP] (section 5.2.1. and section 5.3.1.). Before
      /// negotiation is complete, the mid value may be null.
      /// After rollbacks, the value may change from a non-null
      /// value to null.
      /// </summary>
      [getter]
      string                  mid;

      /// <summary>
      /// Gets the the sender attribute exposes the RTCRtpSender corresponding
      /// to the RTP media that may be sent with mid = mid. On getting, the
      /// attribute MUST return the value of the [[Sender]] slot.
      /// </summary>
      [getter]
      RTCRtpSender            sender;

      /// <summary>
      /// Gets the the receiver attribute is the RTCRtpReceiver corresponding
      /// to the RTP media that may be received with mid = mid. On getting the
      // attribute MUST return the value of the [[Receiver]] slot.
      /// </summary>
      [getter]
      RTCRtpReceiver          receiver;

      /// <summary>
      /// Gets the the stopped attribute indicates that the sender of this
      /// transceiver will no longer send, and that the receiver will no longer
      /// receive. It is true if either stop has been called or if setting the
      /// local or remote description has caused the RTCRtpTransceiver to be
      /// stopped. On getting, this attribute MUST return the value of the
      /// [[Stopped]] slot.
      /// </summary>
      [getter]
      bool                    stopped;

      /// <summary>
      /// Gets or sets the direction attribute as defined in [JSEP] (section 4.2.4.),
      /// the direction attribute indicates the preferred direction of this transceiver,
      /// which will be used in calls to createOffer and createAnswer. An update of
      /// directionality does not take effect immediately. Instead, future calls to
      /// createOffer and createAnswer mark the corresponding media description as
      /// sendrecv, sendonly, recvonly or inactive as defined in [JSEP] (section 5.2.2.
      /// and section 5.3.2.)
      /// </summary>
      [getter, setter]
      RTCRtpTransceiverDirection  direction;

      /// <summary>
      /// Gets the the current direction as defined in [JSEP] (section 4.2.5.), the
      /// currentDirection attribute indicates the current direction negotiated for
      /// this transceiver. The value of currentDirection is independent of the value
      /// of RTCRtpEncodingParameters.active since one cannot be deduced from the
      /// other. If this transceiver has never been represented in an offer/answer
      /// exchange, or if the transceiver is stopped, the value is null. On getting,
      /// this attribute MUST return the value of the [[CurrentDirection]] slot.
      /// </summary>
      [getter, optional]
      RTCRtpTransceiverDirection  currentDirection;

      /// <summary>
      /// The stop method irreversibly stops the RTCRtpTransceiver. The sender of this
      /// transceiver will no longer send, the receiver will no longer receive. Calling
      /// stop() updates the negotiation-needed flag for the RTCRtpTransceiver's
      /// associated RTCPeerConnection.
      /// </summary>
      void stop();

      /// <summary>
      /// The setCodecPreferences method overrides the default codec preferences used by
      /// the user agent. When generating a session description using either createOffer or
      /// createAnswer, the user agent MUST use the indicated codecs, in the order
      /// specified in the codecs argument, for the media section corresponding to this RTCRtpTransceiver.
      ///
      /// This method allows applications to disable the negotiation of specific codecs.
      /// It also allows an application to cause a remote peer to prefer the codec that appears
      /// first in the list for sending.
      ///
      /// Codec preferences remain in effect for all calls to createOffer and createAnswer that
      /// include this RTCRtpTransceiver until this method is called again. Setting codecs
      /// to an empty sequence resets codec preferences to any default value.
      ///
      /// The codecs sequence passed into setCodecPreferences can only contain codecs
      /// that are returned by RTCRtpSender.getCapabilities(kind) or
      /// RTCRtpReceiver.getCapabilities(kind), where kind is the kind of the
      /// RTCRtpTransceiver on which the method is called. Additionally, the
      /// RTCRtpCodecCapability dictionary members cannot be modified. If codecs
      /// does not fulfill these requirements, the user agent MUST throw an InvalidAccessError.
      /// </summary>
      void setCodecPreferences(RTCRtpCodecCapabilityList codecs) throws (RTCError);
    };
  }
}
