/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace webRtc
  {
    typedef uint32 SsrcType;
    typedef uint8 PayloadType;
    typedef std::list<SsrcType> SsrcTypeList;

    /// <summary>
    /// The RTCStatsTypeSet contains a list of stats types to be collected.
    /// </summary>
    struct RTCStatsTypeSet
    {
      typedef std::set<RTCStatsType> EnumSet;

      /// <summary>
      /// Constructs an empty instance of an RTCStatsTypeSet object.
      /// </summary>
      [constructor, default]
      void RTCStatsTypeSet();
      /// <summary>
      /// Constructs an instance of an RTCStatsTypeSet object given a set of types types to collect.
      /// </summary>
      [constructor, altname(RTCStatsTypeSetWithValues)]
      void RTCStatsTypeSet(EnumSet values);

      bool hasStatType(RTCStatsType type);
    };

    /// <summary>
    /// An RTCStats dictionary represents the stats object constructed
    /// by inspecting a specific monitored object. The RTCStats dictionary
    /// is a base type that specifies as set of default attributes, such
    /// as timestamp and type. Specific stats are added by extending the
    /// RTCStats dictionary.
    /// </summary>
    struct RTCStats
    {
      /// <summary>
      /// Gets the timestamp, of type DOMHighResTimeStamp [HIGHRES-TIME],
      /// associated with this object. The time is relative to the UNIX epoch
      /// (Jan 1, 1970, UTC). For statistics that came from a remote source
      /// (e.g., from received RTCP packets), timestamp represents the time at
      /// which the information arrived at the local endpoint. The remote
      /// timestamp can be found in an additional field in an RTCStats-derived
      /// dictionary, if applicable.
      /// </summary>
      [getter]
      Time                timestamp;

      /// <summary>
      /// Gets the type of this object.
      ///
      /// The type attribute MUST be initialized to the name of the most specific
      /// type this RTCStats dictionary represents.
      /// </summary>
      [optional, getter]
      RTCStatsType        statsType;

      /// <summary>
      /// Gets the type of statistics object when the type is not a
      /// pre-known type.
      /// </summary>
      [getter]
      string              statsTypeOther;

      /// <summary>
      /// A unique id that is associated with the object that was inspected
      /// to produce this RTCStats object. Two RTCStats objects, extracted
      /// from two different RTCStatsReport objects, MUST have the same id
      /// if they were produced by inspecting the same underlying object.
      /// User agents are free to pick any format for the id as long as it
      /// meets the requirements above.
      /// </summary>
      [getter]
      string              id;

      [constructor, default, delete]
      void RTCStats();
    };

    /// <summary>
    /// Stats that apply to any end of any RTP stream.
    /// </summary>
    struct RTCRtpStreamStats : RTCStats
    {
      /// <summary>
      /// Gets the 32-bit unsigned integer value per [RFC3550] used to identify the
      //// source of the stream of RTP packets that this stats object concerns.
      /// </summary>
      [optional, getter]
      SsrcType            ssrc;

      /// <summary>
      /// Gets either "audio" or "video". This must match the media type part of
      /// the information in the corresponding codec member of RTCCodecStats,
      /// and must match the "kind" attribute of the related MediaStreamTrack.
      /// </summary>
      [getter]
      string              kind;

      /// <summary>
      /// Gets a unique identifier that is associated to the object that
      /// was inspected to produce the RTCTransportStats associated with this RTP stream.
      /// </summary>
      [getter]
      string              transportId;

      /// <summary>
      /// Gets a unique identifier that is associated to the object that was
      /// inspected to produce the RTCCodecStats associated with this RTP stream.
      /// </summary>
      [getter]
      string              codecId;

      /// <summary>
      /// Gets the count of the total number of Full Intra Request (FIR) packets received by the sender.
      /// This metric is only valid for video and is sent by receiver. Calculated as
      /// defined in [RFC5104] section 4.3.1. and does not use the metric indicated
      /// in [RFC2032], because it was deprecated by [RFC4587].
      /// </summary>
      [getter]
      unsigned long       firCount;

      /// <summary>
      /// Gets the count of the total number of Picture Loss Indication (PLI) packets received
      /// by the sender. This metric is only valid for video and is sent by receiver.
      /// Calculated as defined in [RFC4585] section 6.3.1.
      /// </summary>
      [getter]
      unsigned long       pliCount;

      /// <summary>
      /// Gets the count of the total number of Negative ACKnowledgement (NACK) packets received
      /// by the sender and is sent by receiver. Calculated as defined in [RFC4585]
      /// section 6.2.1.
      /// </summary>
      [getter]
      unsigned long       nackCount;

      /// <summary>
      /// Gets the count of the total number of Slice Loss Indication (SLI) packets received by
      /// the sender. This metric is only valid for video and is sent by receiver.
      /// Calculated as defined in [RFC4585] section 6.3.2.
      /// </summary>
      [getter]
      unsigned long       sliCount;

      /// <summary>
      /// Gets the sum of the QP values of frames passed. The count of frames is in
      /// framesDecoded for inbound stream stats, and in framesEncoded for
      /// outbound stream stats.
      ///
      /// The definition of QP value depends on the codec; for VP8, the QP value
      /// is the value carried in the frame header as the syntax element
      /// "y_ac_qi", and defined in [RFC6386] section 19.2. Its range is
      /// 0..127.
      ///
      /// Note that the QP value is only an indication of quantizer values used;
      /// many formats have ways to vary the quantizer value within the frame.
      ///
      /// Only valid for video.
      /// </summary>
      [getter]
      unsigned long long  qpSum;

      [constructor, default, delete]
      void RTCRtpStreamStats();
    };

    /// <summary>
    /// The RTCCodecStats object contains information about the codec associated
    /// with an RTP stream.
    /// </summary>
    struct RTCCodecStats : RTCStats
    {
      /// <summary>
      /// Gets the payload type as used in RTP encoding or decoding.
      /// </summary>
      [optional, getter]
      PayloadType      payloadType;

      /// <summary>
      /// Gets "encode" or "decode", depending on whether this object represents
      /// a media format that the implementation is prepared to encode or decode.
      /// </summary>
      [getter, optional]
      RTCCodecType     codecType;

      /// <summary>
      /// Gets the unique identifier of the transport on which this codec is being used, which can be used to look up the corresponding RTCTransportStats object.
      /// </summary>
      string           transportId;

      /// <summary>
      /// Gets the codec MIME media type/subtype. e.g., video/vp8 or equivalent.
      /// </summary>
      [getter]
      string           mimeType;

      /// <summary>
      /// Gets the media sampling rate.
      /// </summary>
      [getter]
      unsigned long    clockRate;

      /// <summary>
      /// Gets the number of channels. Use 2 for stereo, missing for most other cases.
      /// </summary>
      [optional, getter]
      unsigned long    channels;

      /// <summary>
      /// Gets the a=fmtp line in the SDP corresponding to the codec, i.e., after the
      /// colon following the PT. This defined by [JSEP] in Section 5.7.
      /// </summary>
      [getter]
      string           sdpFmtpLine;

      /// <summary>
      /// Gets the identifier for the implementation used. This is useful for
      /// diagnosing interoperability issues.
      /// </summary>
      [getter]
      string           implementation;

      [constructor, default, delete]
      void RTCCodecStats();
    };

    /// <summary>
    /// The RTCReceivedRtpStreamStats object represents the measurement metrics
    /// for the incoming RTP media stream.
    /// </summary>
    struct RTCReceivedRtpStreamStats : RTCRtpStreamStats
    {
      /// <summary>
      /// Gets the total number of RTP packets received for this SSRC. At the
      /// receiving endpoint, this is calculated as defined in [RFC3550] section
      /// 6.4.1. At the sending endpoint the packetsReceived can be calculated
      /// by subtracting the packets lost from the expected Highest Sequence
      /// Number reported in the RTCP Sender Report as discussed in Appendix
      /// A.3. in [RFC3550].
      /// </summary>
      [getter]
      unsigned long       packetsReceived;

      /// <summary>
      /// Gets the total number of RTP packets lost for this SSRC. Calculated as
      /// defined in [RFC3550] section 6.4.1. Note that because of how this is
      /// estimated, it can be negative if more packets are received than sent.
      /// </summary>
      [getter]
      unsigned long       packetsLost;

      /// <summary>
      /// Gets the packet Jitter measured in seconds for this SSRC.
      /// Calculated as defined in section 6.4.1. of [RFC3550].
      /// </summary>
      [getter]
      double              jitter;

      [getter]
      /// <summary>
      /// Gets the cumulative number of RTP packets discarded by the jitter buffer
      /// due to late or early-arrival, i.e., these packets are not played out.
      /// RTP packets discarded due to packet duplication are not reported in
      /// this metric [XRBLOCK-STATS]. Calculated as defined in [RFC7002]
      /// section 3.2 and Appendix A.a.
      /// </summary>
      unsigned long  packetsDiscarded;

      [getter]
      /// <summary>
      /// Gets the cumulative number of lost RTP packets repaired after applying
      /// an error-resilience mechanism [XRBLOCK-STATS]. It is measured for
      /// the primary source RTP packets and only counted for RTP packets that
      /// have no further chance of repair. To clarify, the value is upper-bound
      /// to the cumulative number of lost packets. Calculated as defined in
      /// [RFC7509] section 3.1 and Appendix A.b.
      /// </summary>
      unsigned long  packetsRepaired;

      [getter]
      /// <summary>
      /// Gets the cumulative number of RTP packets lost during loss bursts,
      /// Appendix A (c) of [RFC6958].
      /// </summary>
      unsigned long  burstPacketsLost;

      [getter]
      /// <summary>
      /// Gets the cumulative number of RTP packets discarded during discard
      /// bursts, Appendix A (b) of [RFC7003].
      /// </summary>
      unsigned long  burstPacketsDiscarded;

      [getter]
      /// <summary>
      /// Gets the cumulative number of bursts of lost RTP packets, Appendix A (e) of [RFC6958].
      ///
      /// [RFC3611] recommends a Gmin (threshold) value of 16 for classifying a sequence
      /// of packet losses or discards as a burst.
      /// </summary>
      unsigned long  burstLossCount;

      [getter]
      /// <summary>
      /// Gets the cumulative number of bursts of discarded RTP packets, Appendix A (e) of [RFC8015].
      /// </summary>
      unsigned long  burstDiscardCount;

      [getter]
      /// <summary>
      /// Gets the fraction of RTP packets lost during bursts to the total number of RTP packets
      /// expected in the bursts. As defined in Appendix A (a) of [RFC7004], however, the
      /// actual value is reported without multiplying by 32768.
      /// </summary>
      double  burstLossRate;

      [getter]
      /// <summary>
      /// Gets the fraction of RTP packets discarded during bursts to the total number of RTP
      /// packets expected in bursts. As defined in Appendix A (e) of [RFC7004], however,
      /// the actual value is reported without multiplying by 32768.
      /// </summary>
      double  burstDiscardRate;

      [getter]
      /// <summary>
      /// Gets the fraction of RTP packets lost during the gap periods. Appendix A (b) of
      /// [RFC7004], however, the actual value is reported without multiplying by 32768.
      /// </summary>
      double  gapLossRate;

      [getter]
      /// <summary>
      /// Gets the fraction of RTP packets discarded during the gap periods. Appendix A (f)
      /// of [RFC7004], however, the actual value is reported without multiplying by 32768.
      /// </summary>
      double  gapDiscardRate;

      [constructor, default, delete]
      void RTCReceivedRtpStreamStats();
    };

    /// <summary>
    /// The RTCInboundRtpStreamStats dictionary represents the measurement metrics
    /// for the incoming RTP media stream. The timestamp reported in the statistics
    /// object is the time at which the data was sampled.
    /// </summary>
    struct RTCInboundRtpStreamStats : RTCReceivedRtpStreamStats {
      /// <summary>
      /// Gets the identifier of the stats object representing the receiving track,
      /// an RTCReceiverAudioTrackAttachmentStats or RTCReceiverVideoTrackAttachmentStats.
      /// </summary>
      [getter]
      string trackId;

      /// <summary>
      /// Gets the stats ID used to look up the RTCAudioReceiverStats or
      /// RTCVideoReceiverStats object receiving this stream.
      /// </summary>
      [getter]
      string receiverId;

      /// <summary>
      /// Gets the remoteId is used for looking up the remote
      /// RTCRemoteOutboundRtpStreamStats object for the same SSRC.
      /// </summary>
      [getter]
      string remoteId;

      /// <summary>
      /// Gets the total number of frames correctly decoded for this SSRC, i.e.,
      /// frames that would be displayed if no frames are dropped. Only valid for video.
      /// </summary>
      [getter, optional]
      unsigned long framesDecoded;

      /// <summary>
      /// Gets the timestamp at which the last packet was received for
      /// this SSRC. This differs from timestamp, which represents the time at
      /// which the statistics were generated by the local endpoint.
      /// </summary>
      [getter]
      Time lastPacketReceivedTimestamp;

      /// <summary>
      /// Gets the average RTCP interval between two consecutive compound RTCP
      /// packets. This is calculated by the sending endpoint when sending
      /// compound RTCP reports. Compound packets must contain at least a RTCP
      /// RR or SR packet and an SDES packet with the CNAME item.
      /// </summary>
      [getter]
      double averageRtcpInterval;

      /// <summary>
      /// Gets the total number of RTP FEC packets received for this SSRC.
      /// This counter can also be incremented when receiving FEC packets
      /// in-band with media packets (e.g., with Opus).
      /// </summary>
      [getter]
      unsigned long fecPacketsReceived;

      /// <summary>
      /// Gets the total number of bytes received for this SSRC. Calculated as
      /// defined in [RFC3550] section 6.4.1.
      /// </summary>
      [getter]
      unsigned long long bytesReceived;

      /// <summary>
      /// Gets the cumulative number of RTP packets that failed to be
      /// decrypted according to the procedures in [RFC3711]. These packets
      /// are not counted by packetsDiscarded.
      /// </summary>
      [getter]
      unsigned long packetsFailedDecryption;

      /// <summary>
      /// Gets the cumulative number of packets discarded because they are
      /// duplicated. Duplicate packets are not counted in packetsDiscarded.
      ///
      /// Duplicated packets have the same RTP sequence number and content as
      /// a previously received packet. If multiple duplicates of a packet are
      /// received, all of them are counted.
      ///
      /// An improved estimate of lost packets can be calculated by adding
      /// packetsDuplicated to packetsLost; this will always result in a
      /// positive number, but not the same number as RFC 3550 would calculate.
      /// </summary>
      [getter]
      unsigned long packetsDuplicated;

      /// <summary>
      /// Total number of packets received for this SSRC, per Differentiated
      /// Services code point (DSCP) [RFC2474]. DSCPs are identified as decimal
      /// integers in string form. Note that due to network remapping and bleaching,
      /// these numbers are not expected to match the numbers seen on sending.
      /// Not all OSes make this information available.
      /// </summary>
      [getter]
      std::map<string, unsigned long> perDscpPacketsReceived;

      [constructor, default, delete]
      void RTCInboundRtpStreamStats();
    };    

    /// <summary>
    /// The RTCRemoteInboundRtpStreamStats dictionary represents the remote endpoint's
    /// measurement metrics for a particular incoming RTP stream (corresponding to an
    /// outgoing RTP stream at the sending endpoint). The timestamp reported in the
    /// statistics object is the time at which the corresponding RTCP RR was received.
    /// </summary>
    struct RTCRemoteInboundRtpStreamStats : RTCReceivedRtpStreamStats {
      /// <summary>
      /// Gets the localId is used for looking up the local RTCOutboundRtpStreamStats object for the same SSRC.
      /// </summary>
      [getter]
      string localId;

      /// <summary>
      /// Gets the estimated round trip time for this SSRC based on the RTCP timestamps in the
      /// RTCP Receiver Report (RR) and measured in seconds. Calculated as defined in section
      /// 6.4.1. of [RFC3550]. If no RTCP Receiver Report is received with a DLSR value other than
      /// 0, the round trip time is left undefined.
      /// </summary>
      [getter]
      double roundTripTime;

      /// <summary>
      /// Gets the fraction packet loss reported for this SSRC. Calculated as defined in [RFC3550]
      /// section 6.4.1 and Appendix A.3.
      /// </summary>
      [getter]
      double fractionLost;

      [constructor, default, delete]
      void RTCRemoteInboundRtpStreamStats();
    };

    /// <summary>
    /// Stats measured at the sending end of an RTP stream, known either because they're
    /// measured locally or because they're received via RTCP, usually in an RTCP Sender Report (SR).
    /// </summary>
    struct RTCSentRtpStreamStats : RTCRtpStreamStats {
      /// <summary>
      /// Gets the total number of RTP packets sent for this SSRC. Calculated as
      /// defined in [RFC3550] section 6.4.1.
      /// </summary>
      [getter]
      unsigned long packetsSent;
    
      /// <summary>
      /// Gets the total number of RTP packets for this SSRC that have been discarded
      /// due to socket errors, i.e. a socket error occured when handing the packets
      /// to the socket. This might happen due to various reasons, including full
      /// buffer or no available memory.
      /// </summary>
      [getter]
      unsigned long packetsDiscardedOnSend;
    
      /// <summary>
      /// Gets the total number of RTP FEC packets sent for this SSRC. This counter can
      /// also be incremented when sending FEC packets in-band with media packets
      /// (e.g., with Opus).
      /// </summary>
      [getter]
      unsigned long fecPacketsSent;
    
      /// <summary>
      /// Gets the total number of bytes sent for this SSRC. Calculated as defined in
      /// [RFC3550] section 6.4.1.
      /// </summary>
      [getter]
      unsigned long long bytesSent;
    
      /// <summary>
      /// Gets the total number of bytes for this SSRC that have been discarded due to
      /// socket errors, i.e. a socket error occured when handing the packets containing
      /// the bytes to the socket. This might happen due to various reasons, including full
      /// buffer or no available memory. Calculated as defined in [RFC3550] section 6.4.1.
      /// </summary>
      [getter]
      unsigned long long bytesDiscardedOnSend;

      /// <summary>
      /// Constructs an empty instance of an RTCSentRtpStreamStats object.
      /// </summary>
      [constructor, default]
      void RTCSentRtpStreamStats();
    };

    /// <summary>
    /// The RTCOutboundRtpStreamStats dictionary represents the measurement
    /// metrics for the outgoing RTP stream. The timestamp reported in the statistics
    /// object is the time at which the data was sampled.
    /// </summary>
    struct RTCOutboundRtpStreamStats : RTCSentRtpStreamStats
    {

      /// <summary>
      /// Gets the identifier of the stats object representing the current track
      /// attachment to the sender of this stream, an RTCSenderAudioTrackAttachmentStats
      /// or RTCSenderVideoTrackAttachmentStats.
      /// </summary>
      [getter]
      string trackId;

      /// <summary>
      /// Gets the stats ID used to look up the RTCAudioSenderStats or RTCVideoSenderStats
      /// object sending this stream.
      /// </summary>
      [getter]
      string senderId;

      /// <summary>
      /// Gets the remoteId is used for looking up the remote RTCRemoteInboundRtpStreamStats
      /// object for the same SSRC.
      /// </summary>
      [getter]
      string remoteId;

      /// <summary>
      /// Gets the timestamp at which the last packet was sent for this SSRC.
      /// This differs from timestamp, which represents the time at which the statistics
      /// were generated by the local endpoint.
      /// </summary>
      [getter]
      Time lastPacketSentTimestamp;

      /// <summary>
      /// Gets the current target bitrate configured for this particular SSRC and is
      /// the Transport Independent Application Specific (TIAS) bitrate [RFC3890].
      /// Typically, the target bitrate is a configuration parameter provided to the
      /// codec's encoder and does not count the size of the IP or other transport layers
      /// like TCP or UDP. It is measured in bits per second and the bitrate is calculated
      /// over a 1 second window.
      /// </summary>
      [getter]
      double targetBitrate;

      /// <summary>
      /// Gets the total number of frames successfully
      /// encoded for this RTP media stream. Only valid for video. 
      /// </summary>
      [getter, optional]
      unsigned long framesEncoded;

      /// <summary>
      /// Gets the total number of milliseconds that has been spent encoding the framesEncoded frames
      /// of this stream. The average encode time can be calculated by dividing this value
      /// with framesEncoded. The time it takes to encode one frame is the time passed between
      /// feeding the encoder a frame and the encoder returning encoded data for that frame.
      /// This does not include any additional time it may take to packetize the resulting data.
      /// </summary>
      [getter]
      Milliseconds totalEncodeTime;

      /// <summary>
      /// Gets the average RTCP interval between two consecutive compound RTCP packets.
      /// This is calculated by the sending endpoint when sending compound RTCP reports.
      /// Compound packets must contain at least a RTCP RR or SR packet and an SDES packet
      /// with the CNAME item.
      /// </summary>
      [getter]
      double averageRtcpInterval;

      /// <summary>
      /// Gets the current reason for limiting the resolution and/or
      /// framerate, or "none" if not limited. Only valid for video. 
      /// </summary>
      [getter, optional]
      RTCQualityLimitationReason qualityLimitationReason;

      /// <summary>
      /// Gets a record of the total time, in milliseconds, that this
      /// stream has spent in each quality limitation state. The record includes a
      /// mapping for all RTCQualityLimitationReason types, including "none". Only
      /// valid for video.
      /// 
      /// The sum of all entries minus qualityLimidationDurations["none"] gives the
      /// total time that the stream has been limited.
      /// </summary>
      [getter]
      std::map<RTCQualityLimitationReason, Milliseconds> qualityLimitationDurations;

      /// <summary>
      /// Gets the total number of packets sent for this SSRC, per DSCP. DSCPs are identified
      /// as decimal integers in string form.
      /// </summary>
      [getter]
      std::map<string, unsigned long> perDscpPacketsSent;

      [constructor, default, delete]
      void RTCOutboundRtpStreamStats();
    };

    /// <summary>
    /// The RTCRemoteOutboundRtpStreamStats dictionary represents the remote
    /// endpoint's measurement metrics for its outgoing RTP stream (corresponding
    /// to an outgoing RTP stream at the sending endpoint). The timestamp reported
    /// in the statistics object is the time at which the corresponding RTCP SR was received.
    /// </summary>
    struct RTCRemoteOutboundRtpStreamStats : RTCSentRtpStreamStats {
      /// <summary>
      /// Gets the localId is used for looking up the local
      /// RTCInboundRtpStreamStats object for the same SSRC.
      /// </summary>
      [getter]
      string localId;

      /// <summary>
      /// Gets remoteTimestamp, of type DOMHighResTimeStamp [HIGHRES-TIME],
      /// representing the remote timestamp at which these statistics were
      /// sent by the remote endpoint. This differs from timestamp, which
      /// represents the time at which the statistics were generated or
      /// received by the local endpoint. The remoteTimestamp, if present,
      /// is derived from the NTP timestamp in an RTCP Sender Report (SR)
      /// packet, which reflects the remote endpoint's clock. That clock
      /// may not be synchronized with the local clock.
      /// </summary>
      [getter]
      Time remoteTimestamp;

      [constructor, default, delete]
      void RTCRemoteOutboundRtpStreamStats();
    };

    /// <summary>
    /// The RTCRtpContributingSourceStats dictionary represents the measurement
    /// metrics for a contributing source (CSRC) that is contributing to an
    /// incoming RTP stream. Each contributing source produces a stream of
    /// RTP packets, which are combined by a mixer into a single stream of
    /// RTP packets that is ultimately received by the WebRTC endpoint.
    /// Information about the sources that contributed to this combined
    /// stream may be provided in the CSRC list or [RFC6465] header
    /// extension of received RTP packets. The timestamp of this stats
    /// object is the most recent time an RTP packet the source contributed
    /// to was received and counted by packetsContributedTo.
    /// </summary>
    struct RTCRtpContributingSourceStats : RTCStats {
      /// <summary>
      /// Gets the SSRC identifier of the contributing source represented by this
      /// stats object, as defined by [RFC3550]. It is a 32-bit unsigned integer
      /// that appears in the CSRC list of any packets the relevant source contributed to.
      /// </summary>
      [getter]
      unsigned long contributorSsrc;

      /// <summary>
      /// Gets the ID of the RTCInboundRtpStreamStats object representing the
      /// inbound RTP stream that this contributing source is contributing to.
      /// </summary>
      [getter]
      string inboundRtpStreamId;
      
      /// <summary>
      /// Gets the total number of RTP packets that this contributing source contributed
      /// to. This value is incremented each time a packet is counted by
      /// RTCInboundRtpStreamStats.packetsReceived, and the packet's CSRC list
      /// (as defined by [RFC3550] section 5.1) contains the SSRC identifier
      /// of this contributing source, contributorSsrc.
      /// </summary>
      [getter]
      unsigned long packetsContributedTo;
      
      /// <summary>
      /// Gets the value of audioLevel is between 0..1 (linear), where 1.0 represents 0
      /// dBov, 0 represents silence, and 0.5 represents approximately 6 dBSPL
      /// change in the sound pressure level from 0 dBov. Present if the last received
      /// RTP packet that this source contributed to contained an [RFC6465]
      /// mixer-to-client audio level header extension.
      ///
      /// The [RFC6465] header extension contains values in the range 0..127, in
      /// units of -dBov, where 127 represents silence. To convert these values 
      /// to the linear 0..1 range of audioLevel, a value of 127 is converted to
      /// 0, and all other values are converted using the equation:
      /// f(rfc6465_level) = 10^(-rfc6465_level/20).
      /// </summary>
      [getter, optional]
      double audioLevel;

      [constructor, default, delete]
      void RTCRtpContributingSourceStats();
    };

    /// <summary>
    /// Statistics related to the RTCPeerConnection object.
    /// </summary>
    struct RTCPeerConnectionStats : RTCStats {

      /// <summary>
      /// Gets the number of unique DataChannels that have
      /// entered the "open" state during their lifetime.
      /// </summary>
      [getter]
      unsigned long dataChannelsOpened;

      /// <summary>
      /// Gets the number of unique DataChannels that have
      /// left the "open" state during their lifetime (due to being
      /// closed by either end or the underlying transport being closed).
      /// DataChannels that transition from "connecting" to "closing" or
      /// "closed" without ever being "open" are not counted in this number.
      /// </summary>
      [getter]
      unsigned long dataChannelsClosed;

      /// <summary>
      /// Gets the number of unique DataChannels returned from a successful
      /// createDataChannel() call on the RTCPeerConnection. If the underlying
      /// data transport is not established, these may be in the "connecting" state.
      /// </summary>
      [getter]
      unsigned long dataChannelsRequested;

      /// <summary>
      /// Gets the number of unique DataChannels signaled in a "datachannel"
      /// event on the RTCPeerConnection.
      /// </summary>
      [getter]
      unsigned long dataChannelsAccepted;

      [constructor, default, delete]
      void RTCPeerConnectionStats();
    };

    /// <summary>
    /// The RTCMediaStreamStats object contains the statistics for the
    /// RTCMediaStream object.
    /// </summary>
    struct RTCMediaStreamStats : RTCStats
    {
      /// <summary>
      /// Gets the stream.id property.
      /// </summary>
      [getter]
      string      streamIdentifier;

      /// <summary>
      /// Gets the id of the stats object, not the track.id.
      /// </summary>
      [getter]
      StringList  trackIds;

      [constructor, default, delete]
      void RTCMediaStreamStats();
    };

    /// <summary>
    /// Contains statistics related to a specific MediaStreamTrack's attachment to an
    /// RTCRtpSender and the corresponding media-level metrics.
    /// </summary>
    struct RTCMediaHandlerStats : RTCStats {

      /// <summary>
      /// Gets the id property of the track.
      /// </summary>
      [getter]
      string trackIdentifier;

      /// <summary>
      /// Gets true if the source is remote, for instance if it is sourced from
      /// another host via an RTCPeerConnection. False otherwise. Only applicable
      /// for 'track' stats.
      /// </summary>
      [getter, optional]
      bool remoteSource;

      /// <summary>
      /// Gets the "ended" state of the track.
      /// </summary>
      [getter]
      bool ended;

      /// <summary>
      /// Gets either "audio" or "video". This reflects the "kind"
      /// attribute of the MediaStreamTrack, see [GETUSERMEDIA].
      /// </summary>
      [getter]
      string kind;

      /// <summary>
      /// Gets the priority set for the track. It is specified
      /// in [RTCWEB-TRANSPORT], Section 4.
      /// </summary>
      [getter]
      RTCPriorityType priority;

      [constructor, default, delete]
      void RTCMediaHandlerStats();
    };

    /// <summary>
    /// Contains statistics related to a specific MediaStreamTrack's attachment to
    /// an RTCRtpSender and the corresponding media-level metrics. It is accessed
    /// by either RTCSenderVideoTrackAttachmentStats or
    /// RTCSenderAudioTrackAttachmentStats, both inherited from RTCMediaHandlerStats.
    /// </summary>
    struct RTCVideoHandlerStats : RTCMediaHandlerStats {

      /// <summary>
      /// Gets the width of the last processed frame for this track.
      /// Before the first frame is processed this attribute is missing.
      /// </summary>
      [getter]
      unsigned long frameWidth;
    
      /// <summary>
      /// Gets the height of the last processed frame for this track.
      /// Before the first frame is processed this attribute is missing.
      /// </summary>
      [getter]
      unsigned long frameHeight;
    
      /// <summary>
      /// Gets the nominal FPS value before the degradation preference
      /// is applied. It is the number of complete frames in the last
      /// second. For sending tracks it is the current captured FPS
      /// and for the receiving tracks it is the current decoding framerate.
      /// </summary>
      [getter]
      double framesPerSecond;
    };

    /// <summary>
    /// An RTCVideoSenderStats object represents the stats about one
    /// video sender of a RTCPeerConnection object for which one calls
    /// getStats.
    ///
    /// It appears in the stats as soon as the sender is added by either
    /// addTrack or addTransceiver, or by media negotiation.
    /// </summary>
    struct RTCVideoSenderStats : RTCVideoHandlerStats {
    
      /// <summary>
      /// Gets the total number of frames captured, before encoding,
      /// for this RTCRtpSender (or for this MediaStreamTrack, if type is
      /// "track"). For example, if type is "sender" and this sender's track
      /// represents a camera, then this is the number of frames produced by the
      /// camera for this track while being sent by this sender, combined with
      /// the number of frames produced by all tracks previously attached to this
      /// sender while being sent by this sender. Framerates can vary due to
      /// hardware limitations or environmental factors such as lighting conditions.
      /// </summary>
      [getter]
      unsigned long framesCaptured;
    
      /// <summary>
      /// Gets the total number of frames sent by this RTCRtpSender (or for
      /// this MediaStreamTrack, if type is "track").
      /// </summary>
      [getter]
      unsigned long framesSent;
    
      /// <summary>
      /// Gets the total number of huge frames sent by this RTCRtpSender
      /// (or for this MediaStreamTrack, if type is "track"). Huge frames,
      /// by definition, are frames that have an encoded size at least 2.5 times
      /// the average size of the frames. The average size of the frames is defined
      /// as the target bitrate per second divided by the target fps at the time the
      /// frame was encoded. These are usually complex to encode frames with a lot
      /// of changes in the picture. This can be used to estimate, e.g slide
      /// changes in the streamed presentation. If a huge frame is also a key
      /// frame, then both counters hugeFramesSent and keyFramesSent are incremented.
      ///
      /// The multiplier of 2.5 is choosen from analyzing encoded frame sizes for a
      /// sample presentation using webrtc standalone implementation. 2.5 is a
      /// reasonably large multiplier which still caused all slide change events to be
      /// identified as a huge frames. It, however, produced 1.4% of false positive
      /// slide change detections which is deemed reasonable.
      /// </summary>
      [getter]
      unsigned long hugeFramesSent;
    
      /// <summary>
      /// Gets the total number of key frames sent by this RTCRtpSender (or for
      /// this MediaStreamTrack, if type is "track"), such as Infra-frames in VP8
      /// [RFC6386] or I-frames in H.264 [RFC6184]. This is a subset of framesSent.
      /// framesSent - keyFramesSent gives you the number of delta frames sent.
      /// </summary>
      [getter]
      unsigned long keyFramesSent;

      [constructor, default, delete]
      void RTCVideoSenderStats();
    };

    /// <summary>
    /// An RTCSenderVideoTrackAttachmentStats object represents the stats about one attachment of a
    /// video MediaStreamTrack to the RTCPeerConnection object for which one calls getStats.
    ///
    /// It appears in the stats as soon as it is attached (via addTrack, via addTransceiver, via
    /// replaceTrack on an RTCRtpSender object).
    /// 
    /// If a video track is attached twice (via addTransceiver or replaceTrack), there will be
    /// two RTCSenderVideoTrackAttachmentStats objects, one for each attachment. They will have
    /// the same "trackIdentifier" attribute, but different "id" attributes.
    ///
    /// If the track is detached from the RTCPeerConnection (via removeTrack or via replaceTrack),
    /// it continues to appear, but with the "objectDeleted" member set to true.
    /// <summary>
    struct RTCSenderVideoTrackAttachmentStats : RTCVideoSenderStats {

      [constructor, default, delete]
      void RTCSenderVideoTrackAttachmentStats();
    };

    /// <summary>
    /// An RTCVideoReceiverStats object represents the stats about one video receiver
    /// of a RTCPeerConnection object for which one calls getStats.
    ///
    /// It appears in the stats as soon as the RTCRtpReceiver is added by either
    /// addTrack or addTransceiver, or by media negotiation.
    /// </summary>
    struct RTCVideoReceiverStats : RTCVideoHandlerStats {

      /// <summary>
      /// Gets the estimated playout time of this receiver's track. The playout time
      /// is the NTP timestamp of the last playable video frame that has a known timestamp
      /// (from an RTCP SR packet mapping RTP timestamps to NTP timestamps), extrapolated
      /// with the time elapsed since it was ready to be played out. This is the "current
      /// time" of the track in NTP clock time of the sender and can be present even if
      /// there is no video currently playing.
      ///
      /// This can be useful for estimating how much audio and video is out of sync for
      /// two tracks from the same remote source, audioTrackStats.estimatedPlayoutTimestamp -
      /// videoTrackStats.estimatedPlayoutTimestamp.
      /// </summary>
      [getter]
      Time estimatedPlayoutTimestamp;
    
      /// <summary>
      /// Gets the sum of the time, in milliseconds, each frame takes from the time it is
      /// received and to the time it exits the jitter buffer. This increases upon frames
      /// exiting, having completed their time in the buffer
      /// (incrementing jitterBufferEmittedCount). The average jitter buffer delay can
      /// be calculated by dividing the jitterBufferDelay with the jitterBufferEmittedCount.
      /// </summary>
      [getter]
      Milliseconds jitterBufferDelay;
    
      /// <summary>
      /// Gets the total number of frames that have come out of the jitter buffer
      /// (increasing jitterBufferDelay).
      /// </summary>
      [getter]
      unsigned long long jitterBufferEmittedCount;
    
      /// <summary>
      /// Gets 
      /// </summary>
      [getter]
      unsigned long framesReceived;
    
      /// <summary>
      /// Gets the total number of complete frames received for this receiver. This metric
      /// is incremented when the complete frame is received.
      /// </summary>
      [getter]
      unsigned long keyFramesReceived;
    
      /// <summary>
      /// Gets the total number of complete key frames received for this MediaStreamTrack,
      /// such as Infra-frames in VP8 [RFC6386] or I-frames in H.264 [RFC6184]. This is a
      /// subset of framesReceived. framesReceived - keyFramesReceived gives you the number
      /// of delta frames received. This metric is incremented when the complete key frame
      /// is received. It is not incremented if a partial key frames is received and sent
      /// for decoding, i.e., the frame could not be recovered via retransmission or FEC.
      /// </summary>
      [getter]
      unsigned long framesDecoded;
    
      /// <summary>
      /// Gets the total number of frames correctly decoded for this SSRC, i.e., frames
      /// that would be displayed if no frames are dropped. Only valid for video.
      /// </summary>
      [getter]
      unsigned long framesDropped;
    
      /// <summary>
      /// Gets the total number of frames dropped predecode or dropped because
      /// the frame missed its display deadline for this receiver's track. As defined in Appendix A (g) of [RFC7004].
      /// </summary>
      [getter]
      unsigned long partialFramesLost;
    
      /// <summary>
      /// Gets the cumulative number of full frames lost, as defined in Appendix A (i) of [RFC7004].
      /// </summary>
      [getter]
      unsigned long fullFramesLost;

      [constructor, default, delete]
      void RTCVideoReceiverStats();
    };

    /// <summary>
    /// Contains statistics related to a specific MediaStreamTrack's attachment to
    /// an RTCRtpSender and the corresponding media-level metrics. It is accessed
    /// by either RTCSenderVideoTrackAttachmentStats or
    /// RTCSenderAudioTrackAttachmentStats, both inherited from RTCMediaHandlerStats.
    /// </summary>
    struct RTCAudioHandlerStats : RTCMediaHandlerStats {
    
      /// <summary>
      /// Gets the value is between 0..1 (linear), where 1.0 represents 0 dBov,
      /// 0 represents silence, and 0.5 represents approximately 6 dBSPL change
      /// in the sound pressure level from 0 dBov.
      ///
      /// The "audio level" value defined in [RFC6464] (as 0..127, where 0 represents
      /// 0 dBov, 126 represents -126 dBov and 127 represents silence) is obtained by
      /// the calculation given in appendix A of [RFC6465]: informally,
      /// level = -round(log10(audioLevel) * 20), with audioLevel 0.0 and values
      /// above 127 mapped to 127.
      ///
      /// The audioLevel represents the output audio level of the track; thus, if
      /// the track is sourced from an RTCReceiver, does no audio processing, has a
      /// constant level, and has a volume setting of 1.0, the audio level is expected
      /// to be the same as the audio level of the source SSRC, while if the volume
      /// setting is 0.5, the audioLevel is expected to be half that value.
      ///
      /// For outgoing audio tracks, the audioLevel is the level of the audio being sent.
      ///
      /// The audioLevel is averaged over some small interval, using the algorithm
      /// described under totalAudioEnergy. The interval used is implementation dependent.
      /// </summary>
      [getter]
      double audioLevel;
    
      /// <summary>
      /// Gets the value computed as follows: for each audio sample sent/received
      /// for this object (and counted by totalSamplesSent or totalSamplesReceived),
      /// add the sample's value divided by the highest-intensity encodable value,
      /// squared and then multiplied by the duration of the sample in seconds. In
      /// other words, duration * Math.pow(energy/maxEnergy, 2).
      ///
      /// This can be used to obtain a root mean square (RMS) value that uses the same
      /// units as audioLevel, as defined in [RFC6464]. It can be converted to these
      /// units using the formula Math.sqrt(totalAudioEnergy/totalSamplesDuration).
      /// This calculation can also be performed using the differences between the
      /// values of two different getStats() calls, in order to compute the average
      /// audio level over any desired time interval. In other words, do
      /// Math.sqrt((energy2 - energy1)/(duration2 - duration1)).
      ///
      /// For example, if a 10ms packet of audio is received with an RMS of 0.5 (out
      /// of 1.0), this should add 0.5 * 0.5 * 0.01 = 0.0025 to totalAudioEnergy. If
      /// another 10ms packet with an RMS of 0.1 is received, this should similarly
      /// add 0.0001 to totalAudioEnergy. Then,
      /// Math.sqrt(totalAudioEnergy/totalSamplesDuration) becomes
      /// Math.sqrt(0.0026/0.02) = 0.36, which is the same value that would be obtained
      /// by doing an RMS calculation over the contiguous 20ms segment of audio.
      /// </summary>
      [getter]
      double totalAudioEnergy;
    
      /// <summary>
      /// Gets whether the last RTP packet sent or played out by this track
      /// contained voice activity or not based on the presence of the V bit in the
      /// extension header, as defined in [RFC6464].
      ///
      /// This value indicates the voice activity in the latest RTP packet played
      /// out from a given SSRC, and is defined in the
      /// RTCRtpSynchronizationSource.voiceActivityFlag of [[WEBRTC].
      /// </summary>
      [getter]
      bool voiceActivityFlag;
    
      /// <summary>
      /// Gets the total duration in seconds of all samples that have sent or received
      /// (and thus counted by totalSamplesSent or totalSamplesReceived). Can be used
      /// with totalAudioEnergy to compute an average audio level over different intervals.
      /// </summary>
      [getter]
      double totalSamplesDuration;

      [constructor, default, delete]
      void RTCAudioHandlerStats();
    };


    /// <summary>
    /// An RTCAudioSenderStats object represents the stats about one audio sender
    /// of a RTCPeerConnection object for which one calls getStats.
    ///
    ///
    /// It appears in the stats as soon as the RTCRtpSender is added by either addTrack
    /// or addTransceiver, or by media negotiation.
    /// </summary>
    struct RTCAudioSenderStats : RTCAudioHandlerStats {

      /// <summary>
      /// Gets the value calculated in decibels, as defined in [ECHO] (2012) section 3.14.
      /// Only present while the sender is sending a track sourced from a microphone where
      /// echo cancellation is applied.
      /// </summary>
      [getter, optional]
      double echoReturnLoss;
    
      /// <summary>
      /// Gets the value calculated in decibels, as defined in [ECHO] (2012) section 3.15.
      /// Only present while the sender is sending a track sourced from a microphone where echo cancellation is applied.
      /// </summary>
      [getter, optional]
      double echoReturnLossEnhancement;
    
      /// <summary>
      /// Gets the total number of samples that have been sent by this sender.
      /// </summary>
      [getter]
      unsigned long long totalSamplesSent;

      [constructor, default, delete]
      void RTCAudioSenderStats();
    };

    /// <summary>
    /// An RTCSenderAudioTrackAttachmentStats object represents the stats about one
    /// attachment of an audio MediaStreamTrack to the RTCPeerConnection object for
    /// which one calls getStats.
    ///
    /// It appears in the stats as soon as it is attached (via addTrack, via
    /// addTransceiver, via replaceTrack on an RTCRtpSender object).
    ///
    /// If an audio track is attached twice (via addTransceiver or replaceTrack),
    /// there will be two RTCSenderAudioTrackAttachmentStats objects, one for each
    /// attachment. They will have the same "trackIdentifier" attribute, but
    /// different "id" attributes.
    ///
    /// If the track is detached from the RTCPeerConnection (via removeTrack or
    /// via replaceTrack), it continues to appear, but with the "objectDeleted" member set to true.
    /// </summary>
    struct RTCSenderAudioTrackAttachmentStats : RTCAudioSenderStats {

      [constructor, default, delete]
      void RTCSenderAudioTrackAttachmentStats();
    };

    /// <summary>
    /// An RTCAudioReceiverStats object represents the stats about one audio receiver
    /// of a RTCPeerConnection object for which one calls getStats.
    ///
    /// It appears in the stats as soon as the RTCRtpReceiver is added by either addTrack
    /// or addTransceiver, or by media negotiation.
    /// </summary>
    struct RTCAudioReceiverStats : RTCAudioHandlerStats {

      /// <summary>
      /// Gets the estimated playout time of this receiver's track. The
      /// playout time is the NTP timestamp of the last playable sample that
      /// has a known timestamp (from an RTCP SR packet mapping RTP timestamps
      /// to NTP timestamps), extrapolated with the time elapsed since it was
      /// ready to be played out. This is the "current time" of the track in NTP
      /// clock time of the sender and can be present even if there is no audio currently playing.
      /// 
      /// This can be useful for estimating how much audio and video is out of sync for
      /// two tracks from the same source,
      /// audioTrackStats.estimatedPlayoutTimestamp - videoTrackStats.estimatedPlayoutTimestamp.
      /// </summary>
      [getter]
      Time estimatedPlayoutTimestamp;

      /// <summary>
      /// Gets the sum of the time, in seconds, each sample takes from the time it is
      /// received and to the time it exits the jitter buffer. This increases upon samples
      /// exiting, having completed their time in the buffer (incrementing
      /// jitterBufferEmittedCount). The average jitter buffer delay can be calculated by
      /// dividing the jitterBufferDelay with the jitterBufferEmittedCount.
      /// </summary>
      [getter]
      Milliseconds jitterBufferDelay;

      /// <summary>
      /// Gets the total number of samples that have come out of the jitter buffer (increasing jitterBufferDelay).
      /// </summary>
      [getter]
      unsigned long long jitterBufferEmittedCount;

      /// <summary>
      /// Gets the total number of samples that have been received by this receiver. This includes concealedSamples.
      /// </summary>
      [getter]
      unsigned long long totalSamplesReceived;

      /// <summary>
      /// Gets the total number of samples that are concealed samples. A concealed sample is a sample
      /// that is based on data that was synthesized to conceal packet loss and does not represent incoming data.
      /// </summary>
      [getter]
      unsigned long long concealedSamples;

      /// <summary>
      /// Gets the number of concealment events. This counter increases every time a concealed sample
      /// is synthesized after a non-concealed sample. That is, multiple consecutive concealed samples
      /// will increase the concealedSamples count multiple times but is a single concealment event.
      /// </summary>
      [getter]
      unsigned long long concealmentEvents;

      [constructor, default, delete]
      void RTCAudioReceiverStats();
    };

    /// <summary>
    /// Statistics related to each RTCDataChannel id. It is accessed by the RTCDataChannelStats.
    /// </summary>
    struct RTCDataChannelStats : RTCStats {

      /// <summary>
      /// Gets the "label" value of the RTCDataChannel object.
      /// </summary>
      [getter]
      string label;

      /// <summary>
      /// Gets the "protocol" value of the RTCDataChannel object.
      /// </summary>
      [getter]
      string protocol;

      /// <summary>
      /// Gets the "id" attribute of the RTCDataChannel object.
      /// </summary>
      [getter]
      long dataChannelIdentifier;

      /// <summary>
      /// Gets a stats object reference for the transport used to carry this datachannel.
      /// </summary>
      [getter]
      string transportId;

      /// <summary>
      /// Gets the "readyState" value of the RTCDataChannel object.
      /// </summary>
      [getter]
      RTCDataChannelState state;

      /// <summary>
      /// Gets the total number of API "message" events sent.
      /// </summary>
      [getter]
      unsigned long messagesSent;

      /// <summary>
      /// Gets the total number of payload bytes sent on this RTCDatachannel,
      /// i.e., not including headers or padding.
      /// </summary>
      [getter]
      unsigned long long bytesSent;

      /// <summary>
      /// Gets the total number of API "message" events received.
      /// </summary>
      [getter]
      unsigned long messagesReceived;

      /// <summary>
      /// Gets the total number of bytes received on this RTCDatachannel,
      /// i.e., not including headers or padding.
      /// </summary>
      [getter]
      unsigned long long bytesReceived;
    };

    /// <summary>
    /// An RTCTransportStats object represents the stats corresponding to
    /// an RTCDtlsTransport and its underlying RTCIceTransport. When RTCP
    /// multiplexing is used, one transport is used for both RTP and RTCP.
    ///
    /// Otherwise, RTP and RTCP will be sent on separate transports, and
    /// rtcpTransportStatsId can be used to pair the resulting RTCTransportStats
    /// objects. Additionally, when bundling is used, a single transport will
    /// be used for all MediaStreamTracks in the bundle group. If bundling is
    /// not used, different MediaStreamTrack will use different transports.
    /// RTCP multiplexing and bundling are described in [WEBRTC].
    /// </summary>
    struct RTCTransportStats : RTCStats {

      /// <summary>
      /// Gets the total number of packets sent over this transport.
      /// </summary>
      [getter]
      unsigned long packetsSent;

      /// <summary>
      /// Gets the total number of packets received on this transport.
      /// </summary>
      [getter]
      unsigned long packetsReceived;

      /// <summary>
      /// Gets the total number of payload bytes sent on this PeerConnection, i.e., not including headers or padding.
      /// </summary>
      [getter]
      unsigned long long bytesSent;

      /// <summary>
      /// Gets the total number of bytes received on this PeerConnection, i.e., not including headers or padding.
      /// </summary>
      [getter]
      unsigned long long bytesReceived;

      /// <summary>
      /// Gets the id of the transport that gives stats for the RTCP component, and this record has only
      /// the RTP component stats, if RTP and RTCP are not multiplexed
      /// </summary>
      [getter]
      string rtcpTransportStatsId;

      /// <summary>
      /// Gets the current value of the "role" attribute of the underlying RTCDtlsTransport's "transport".
      /// </summary>
      [getter, optional]
      RTCIceRole iceRole;

      /// <summary>
      /// Gets the current value of the "state" attribute of the underlying RTCDtlsTransport.
      /// </summary>
      [getter]
      RTCDtlsTransportState dtlsState;

      /// <summary>
      /// Gets a unique identifier that is associated to the object that was inspected
      /// to produce the RTCIceCandidatePairStats associated with this transport.
      /// </summary>
      [getter]
      string selectedCandidatePairId;

      /// <summary>
      /// Gets the local certificate for components where DTLS is negotiated.
      /// </summary>
      [getter]
      string localCertificateId;

      /// <summary>
      /// Gets the remote certificate for components where DTLS is negotiated.
      /// </summary>
      [getter]
      string remoteCertificateId;

      /// <summary>
      /// Gets the descriptive name of the cipher suite used for the DTLS
      /// transport, as defined in the "Description" column of the IANA cipher
      /// suite registry [IANA-TLS-CIPHERS].
      /// </summary>
      [getter]
      string dtlsCipher;

      /// <summary>
      /// Gets the descriptive name of the protection profile used for the
      /// SRTP transport, as defined in the "Profile" column of the IANA DTLS-SRTP
      /// protection profile registry [IANA-DTLS-SRTP] and described further in [RFC5764].
      /// </summary>
      [getter]
      string srtpCipher;

      [constructor, default, delete]
      void RTCTransportStats();
    };

    /// <summary>
    /// RTCIceCandidateStats reflects the properties of a candidate in Section
    /// 15.1 of [RFC5245]. It corresponds to a RTCIceCandidate object.
    /// </summary>
    struct RTCIceCandidateStats : RTCStats {

      /// <summary>
      /// Gets a unique identifier that is associated to the object that was
      /// inspected to produce the RTCTransportStats associated with this candidate.
      /// </summary>
      [getter]
      string transportId;

      /// <summary>
      /// Gets the type of network interface used by the base of a local candidate
      /// (the address the ICE agent sends from). Only present for local candidates;
      /// it's not possible to know what type of network interface a remote candidate
      /// is using.
      /// </summary>
      [getter]
      RTCNetworkType networkType;

      /// <summary>
      /// Gets the IP address of the candidate, allowing for IPv4 addresses and
      /// IPv6 addresses, but fully qualified domain names (FQDNs) are not allowed.
      /// See [RFC5245] section 15.1 for details.
      /// </summary>
      [getter]
      string ip;

      /// <summary>
      /// Gets the port number of the candidate.
      /// </summary>
      [getter]
      long port;

      /// <summary>
      /// Gets the value based on the "transport" defined in [RFC5245] section 15.1.
      /// Valid values for transport is one of udp and tcp.
      /// </summary>
      [getter]
      string protocol;

      /// <summary>
      /// Gets the enumeration as defined in [WEBRTC].
      /// </summary>
      [getter]
      RTCIceCandidateType candidateType;

      /// <summary>
      /// Gets the value calculated as defined in [RFC5245] section 15.1.
      /// </summary>
      [getter]
      long priority;

      /// <summary>
      /// Gets the URL of the TURN or STUN server indicated in the that
      /// translated this IP address. It is the URL address surfaced in
      /// an RTCPeerConnectionIceEvent.
      /// </summary>
      [getter]
      string url;

      /// <summary>
      /// Gets the protocol used by the endpoint to communicate with the TURN server.
      /// This is only present for local candidates. Valid values for the TURN URL
      /// protocol is one of udp, tcp, or tls.
      /// </summary>
      [getter]
      string relayProtocol;

      /// <summary>
      /// Gets true if the candidate has been deleted/freed as described by [RFC5245].
      /// For host candidates, this means that any network resources (typically a socket)
      /// associated with the candidate have been released. For TURN candidates, this
      /// means the TURN allocation is no longer active.
      ///
      /// For remote candidates, this property is not applicable.
      /// </summary>
      [getter, optional]
      bool deleted = false;

      [constructor, default, delete]
      void RTCIceCandidateStats();
    };

    /// <summary>
    /// ICE candidate pair statistics related to the RTCIceTransport objects.
    /// It is accessed by the RTCIceCandidatePairStats.
    /// </summary>
    struct RTCIceCandidatePairStats : RTCStats {

      /// <summary>
      /// Gets a unique identifier that is associated to the object that
      /// was inspected to produce the RTCTransportStats associated with
      /// this candidate pair.
      /// </summary>
      [getter]
      string transportId;

      /// <summary>
      /// Gets a unique identifier that is associated to the object that
      /// was inspected to produce the RTCIceCandidateStats for the local
      /// candidate associated with this candidate pair.
      /// </summary>
      [getter]
      string localCandidateId;

      /// <summary>
      /// Gets a unique identifier that is associated to the object that was
      /// inspected to produce the RTCIceCandidateStats for the remote candidate
      /// associated with this candidate pair.
      /// </summary>
      [getter]
      string remoteCandidateId;

      /// <summary>
      /// Gets the state of the checklist for the local and remote candidates in a pair.
      /// </summary>
      [getter]
      RTCStatsIceCandidatePairState state;

      /// <summary>
      /// Gets the nominated flag described in Section 7.1.3.2.4 of [RFC5245].
      /// </summary>
      [getter]
      bool nominated;

      /// <summary>
      /// Gets the total number of packets sent on this candidate pair.
      /// </summary>
      [getter]
      unsigned long packetsSent;

      /// <summary>
      /// Gets the total number of packets received on this candidate pair.
      /// </summary>
      [getter]
      unsigned long packetsReceived;

      /// <summary>
      /// Gets the total number of payload bytes sent on this candidate pair, i.e.,
      /// not including headers or padding.
      /// </summary>
      [getter]
      unsigned long long bytesSent;

      /// <summary>
      /// Gets the total number of payload bytes received on this candidate pair,
      /// i.e., not including headers or padding.
      /// </summary>
      [getter]
      unsigned long long bytesReceived;

      /// <summary>
      /// Gets the timestamp at which the last packet was sent on this
      /// particular candidate pair, excluding STUN packets.
      /// </summary>
      [getter]
      Time lastPacketSentTimestamp;

      /// <summary>
      /// Gets the timestamp at which the last packet was received on this
      /// particular candidate pair, excluding STUN packets.
      /// </summary>
      [getter]
      Time lastPacketReceivedTimestamp;

      /// <summary>
      /// Gets the timestamp at which the first STUN request was sent on this particular candidate pair.
      /// </summary>
      [getter]
      Time firstRequestTimestamp;

      /// <summary>
      /// Gets the timestamp at which the last STUN request was sent on this particular candidate pair.
      /// The average interval between two consecutive connectivity checks sent can be calculated with
      /// (lastRequestTimestamp - firstRequestTimestamp) / requestsSent.
      /// </summary>
      [getter]
      Time lastRequestTimestamp;

      /// <summary>
      /// Gets the timestamp at which the last STUN response was received on this particular candidate pair.
      /// </summary>
      [getter]
      Time lastResponseTimestamp;

      /// <summary>
      /// Gets the sum of all round trip time measurements in milliseconds since the beginning of the session,
      /// based on STUN connectivity check [STUN-PATH-CHAR] responses (responsesReceived), including those
      /// that reply to requests that are sent in order to verify consent [RFC7675]. The average round
      /// trip time can be computed from totalRoundTripTime by dividing it by responsesReceived.
      /// </summary>
      [getter]
      Milliseconds totalRoundTripTime;

      /// <summary>
      /// Gets the latest round trip time measured in milliseconds, computed from both STUN connectivity
      /// checks [STUN-PATH-CHAR], including those that are sent for consent verification [RFC7675].
      /// </summary>
      [getter]
      Milliseconds currentRoundTripTime;

      /// <summary>
      /// Gets the value calculated by the underlying congestion control by combining the
      /// available bitrate for all the outgoing RTP streams using this candidate pair. The
      /// bitrate measurement does not count the size of the IP or other transport layers
      /// like TCP or UDP. It is similar to the TIAS defined in [RFC3890], i.e., it is
      /// measured in bits per second and the bitrate is calculated over a 1 second window.
      /// 
      /// Implementations that do not calculate a sender-side estimate must leave this
      /// undefined. Additionally, the value must be undefined for candidate pairs that
      /// were never used. For pairs in use, the estimate is normally no lower than the bitrate for
      /// the packets sent at lastPacketSentTimestamp, but might be higher. For candidate pairs
      // that are not currently in use but were used before, implementations must return undefined.
      /// </summary>
      [getter, optional]
      double availableOutgoingBitrate;

      /// <summary>
      /// Gets the value calculated by the underlying congestion control by combining the
      /// available bitrate for all the incoming RTP streams using this candidate pair. The
      /// bitrate measurement does not count the size of the IP or other transport layers
      /// like TCP or UDP. It is similar to the TIAS defined in [RFC3890], i.e., it is
      /// measured in bits per second and the bitrate is calculated over a 1 second window.
      ///
      /// Implementations that do not calculate a receiver-side estimate must leave this
      /// undefined. Additionally, the value should be undefined for candidate pairs that
      /// were never used. For pairs in use, the estimate is normally no lower than the
      /// bitrate for the packets received at lastPacketReceivedTimestamp, but might be
      /// higher. For candidate pairs that are not currently in use but were used before,
      /// implementations must return undefined.
      /// </summary>
      [getter, optional]
      double availableIncomingBitrate;

      /// <summary>
      /// Gets the number of times the circuit breaker is triggered for this particular
      /// 5-tuple. Ceasing transmission when a circuit breaker is triggered is defined
      /// in Section 4.5 of [RFC8083]. The field must return undefined for user-agents
      /// that do not implement the circuit-breaker algorithm.
      /// </summary>
      [getter]
      unsigned long circuitBreakerTriggerCount;

      /// <summary>
      /// Gets the total number of connectivity check requests received (including
      /// retransmissions). It is impossible for the receiver to tell whether the
      /// request was sent in order to check connectivity or check consent, so all
      /// connectivity checks requests are counted here.
      /// </summary>
      [getter]
      unsigned long long requestsReceived;

      /// <summary>
      /// Gets the total number of connectivity check requests sent (not including retransmissions).
      /// </summary>
      [getter]
      unsigned long long requestsSent;

      /// <summary>
      /// Gets the total number of connectivity check responses received.
      /// </summary>
      [getter]
      unsigned long long responsesReceived;

      /// <summary>
      /// Gets the total number of connectivity check responses sent. Since we cannot distinguish
      /// connectivity check requests and consent requests, all responses are counted.
      /// </summary>
      [getter]
      unsigned long long responsesSent;

      /// <summary>
      /// Gets the total number of connectivity check request retransmissions received.
      /// Retransmissions are defined as connectivity check requests with a
      /// TRANSACTION_TRANSMIT_COUNTER attribute where the "req" field is larger
      /// than 1, as defined in [RFC7982].
      /// </summary>
      [getter]
      unsigned long long retransmissionsReceived;

      /// <summary>
      /// Gets the total number of connectivity check request retransmissions sent.
      /// </summary>
      [getter]
      unsigned long long retransmissionsSent;

      /// <summary>
      /// Gets the total number of consent requests sent.
      /// </summary>
      [getter]
      unsigned long long consentRequestsSent;

      /// <summary>
      /// Gets the timestamp at which the latest valid STUN binding response expired,
      /// as defined in [RFC7675] section 5.1. If a valid STUN binding response has not
      /// been made (responsesReceived is zero) or the latest one has not expired this
      /// value must be undefined.
      /// </summary>
      [getter]
      Time consentExpiredTimestamp;

      [constructor, default, delete]
      void RTCIceCandidatePairStats();
    };

    /// <summary>
    /// Information about a certificate used by an RTCIceTransport. It is accessed by the RTCCertificateStats.
    /// </summary>
    struct RTCCertificateStats : RTCStats {

      /// <summary>
      /// Gets the fingerprint of the certificate. Only use the fingerprint
      /// value as defined in Section 5 of [RFC4572].
      /// </summary>
      [getter]
      string fingerprint;

      /// <summary>
      /// Gets the hash function used to compute the certificate fingerprint.
      /// For instance, "sha-256".
      /// </summary>
      [getter]
      string fingerprintAlgorithm;

      /// <summary>
      /// Gets the DER-encoded base-64 representation of the certificate.
      /// </summary>
      [getter]
      string base64Certificate;

      /// <summary>
      /// Gets the issuerCertificateId refers to the stats object that contains
      /// the next certificate in the certificate chain. If the current certificate
      /// is at the end of the chain (i.e. a self-signed certificate), this will not be set.
      /// </summary>
      [getter]
      string issuerCertificateId;

      [constructor, default, delete]
      void RTCCertificateStats();
    };

    /// <summary>
    /// The RTCStatsReport contains a collection of statistic object for
    /// statistics for the inspected objects.
    /// </summary>
    interface RTCStatsReport
    {
      typedef StringList IdList;

      [constructor, delete]
      void RTCStatsReport();

      /// <summary>
      /// Gets a unique object instance identifier for this object.
      /// </summary>
      [getter]
      puid objectId;

      /// <summary>
      /// Gets the list of statistics object identifiers contained within this
      /// stats report.
      /// </summary>
      [getter]
      IdList statsIds;
      /// <summary>
      /// Gets an RTCStats object for the specified statistic object
      /// identifier.
      /// </summary>
      RTCStats getStats(string id);
    };
  }
}
