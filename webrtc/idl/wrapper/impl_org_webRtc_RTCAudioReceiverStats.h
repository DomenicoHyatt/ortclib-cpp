// Generated by zsLibEventingTool

#pragma once

#include "types.h"
#include "generated/org_webRtc_RTCAudioReceiverStats.h"


namespace wrapper {
  namespace impl {
    namespace org {
      namespace webRtc {

        struct RTCAudioReceiverStats : public wrapper::org::webRtc::RTCAudioReceiverStats
        {
          ZS_DECLARE_TYPEDEF_PTR(wrapper::org::webRtc::RTCAudioReceiverStats, WrapperType);
          ZS_DECLARE_TYPEDEF_PTR(wrapper::impl::org::webRtc::RTCAudioReceiverStats, WrapperImplType);
          RTCAudioReceiverStatsWeakPtr thisWeak_;

          RTCAudioReceiverStats() noexcept;
          virtual ~RTCAudioReceiverStats() noexcept;


          // properties RTCStats
          ::zsLib::Time get_timestamp() noexcept override;
          Optional< wrapper::org::webRtc::RTCStatsType > get_statsType() noexcept override;
          String get_statsTypeOther() noexcept override;
          String get_id() noexcept override;

          // properties RTCMediaHandlerStats
          String get_trackIdentifier() noexcept override;
          Optional< bool > get_remoteSource() noexcept override;
          bool get_ended() noexcept override;
          String get_kind() noexcept override;
          wrapper::org::webRtc::RTCPriorityType get_priority() noexcept override;

          // properties RTCAudioHandlerStats
          double get_audioLevel() noexcept override;
          double get_totalAudioEnergy() noexcept override;
          bool get_voiceActivityFlag() noexcept override;
          double get_totalSamplesDuration() noexcept override;

          // properties RTCAudioReceiverStats
          ::zsLib::Time get_estimatedPlayoutTimestamp() noexcept override;
          ::zsLib::Milliseconds get_jitterBufferDelay() noexcept override;
          unsigned long long get_jitterBufferEmittedCount() noexcept override;
          unsigned long long get_totalSamplesReceived() noexcept override;
          unsigned long long get_concealedSamples() noexcept override;
          unsigned long long get_concealmentEvents() noexcept override;
        };

      } // webRtc
    } // org
  } // namespace impl
} // namespace wrapper

