// Generated by zsLibEventingTool

#include "impl_org_webRtc_RTCRtpTransceiver.h"

using ::zsLib::String;
using ::zsLib::Optional;
using ::zsLib::Any;
using ::zsLib::AnyPtr;
using ::zsLib::AnyHolder;
using ::zsLib::Promise;
using ::zsLib::PromisePtr;
using ::zsLib::PromiseWithHolder;
using ::zsLib::PromiseWithHolderPtr;
using ::zsLib::eventing::SecureByteBlock;
using ::zsLib::eventing::SecureByteBlockPtr;
using ::std::shared_ptr;
using ::std::weak_ptr;
using ::std::make_shared;
using ::std::list;
using ::std::set;
using ::std::map;

//------------------------------------------------------------------------------
wrapper::impl::org::webRtc::RTCRtpTransceiver::RTCRtpTransceiver() noexcept
{
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::RTCRtpTransceiverPtr wrapper::org::webRtc::RTCRtpTransceiver::wrapper_create() noexcept
{
  auto pThis = make_shared<wrapper::impl::org::webRtc::RTCRtpTransceiver>();
  pThis->thisWeak_ = pThis;
  return pThis;
}

//------------------------------------------------------------------------------
wrapper::impl::org::webRtc::RTCRtpTransceiver::~RTCRtpTransceiver() noexcept
{
  thisWeak_.reset();
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::RTCRtpTransceiver::stop() noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::RTCRtpTransceiver::setCodecPreferences(shared_ptr< list< wrapper::org::webRtc::RTCRtpCodecCapabilityPtr > > codecs) noexcept(false)
{
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webRtc::RTCRtpTransceiver::get_mid() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::RTCRtpSenderPtr wrapper::impl::org::webRtc::RTCRtpTransceiver::get_sender() noexcept
{
  wrapper::org::webRtc::RTCRtpSenderPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::RTCRtpReceiverPtr wrapper::impl::org::webRtc::RTCRtpTransceiver::get_receiver() noexcept
{
  wrapper::org::webRtc::RTCRtpReceiverPtr result {};
  return result;
}

//------------------------------------------------------------------------------
bool wrapper::impl::org::webRtc::RTCRtpTransceiver::get_stopped() noexcept
{
  bool result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::RTCRtpTransceiverDirection wrapper::impl::org::webRtc::RTCRtpTransceiver::get_direction() noexcept
{
  wrapper::org::webRtc::RTCRtpTransceiverDirection result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::RTCRtpTransceiver::set_direction(wrapper::org::webRtc::RTCRtpTransceiverDirection value) noexcept
{
}

//------------------------------------------------------------------------------
Optional< wrapper::org::webRtc::RTCRtpTransceiverDirection > wrapper::impl::org::webRtc::RTCRtpTransceiver::get_currentDirection() noexcept
{
  Optional< wrapper::org::webRtc::RTCRtpTransceiverDirection > result {};
  return result;
}


