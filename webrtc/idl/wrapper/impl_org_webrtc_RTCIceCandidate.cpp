// Generated by zsLibEventingTool

#include "impl_org_webrtc_RTCIceCandidate.h"

using ::zsLib::String;
using ::zsLib::Optional;
using ::zsLib::Any;
using ::zsLib::AnyPtr;
using ::zsLib::AnyHolder;
using ::zsLib::Promise;
using ::zsLib::PromisePtr;
using ::zsLib::PromiseWithHolder;
using ::zsLib::PromiseWithHolderPtr;
using ::zsLib::eventing::SecureByteBlock;
using ::zsLib::eventing::SecureByteBlockPtr;
using ::std::shared_ptr;
using ::std::weak_ptr;
using ::std::make_shared;
using ::std::list;
using ::std::set;
using ::std::map;

//------------------------------------------------------------------------------
wrapper::impl::org::webrtc::RTCIceCandidate::RTCIceCandidate() noexcept
{
}

//------------------------------------------------------------------------------
wrapper::org::webrtc::RTCIceCandidatePtr wrapper::org::webrtc::RTCIceCandidate::wrapper_create() noexcept
{
  auto pThis = make_shared<wrapper::impl::org::webrtc::RTCIceCandidate>();
  pThis->thisWeak_ = pThis;
  return pThis;
}

//------------------------------------------------------------------------------
wrapper::impl::org::webrtc::RTCIceCandidate::~RTCIceCandidate()
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webrtc::RTCIceCandidate::wrapper_init_org_webrtc_RTCIceCandidate() noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webrtc::RTCIceCandidate::wrapper_init_org_webrtc_RTCIceCandidate(wrapper::org::webrtc::RTCIceCandidateInitPtr init) noexcept(false)
{
}

//------------------------------------------------------------------------------
wrapper::org::webrtc::RTCIceCandidateInitPtr wrapper::impl::org::webrtc::RTCIceCandidate::toJson() noexcept
{
  wrapper::org::webrtc::RTCIceCandidateInitPtr result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webrtc::RTCIceCandidate::get_candidate() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webrtc::RTCIceCandidate::get_sdpMid() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< unsigned short > wrapper::impl::org::webrtc::RTCIceCandidate::get_sdpMLineIndex() noexcept
{
  Optional< unsigned short > result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webrtc::RTCIceCandidate::get_foundation() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< wrapper::org::webrtc::RTCIceComponent > wrapper::impl::org::webrtc::RTCIceCandidate::get_component() noexcept
{
  Optional< wrapper::org::webrtc::RTCIceComponent > result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< unsigned long > wrapper::impl::org::webrtc::RTCIceCandidate::get_priority() noexcept
{
  Optional< unsigned long > result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webrtc::RTCIceCandidate::get_ip() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< wrapper::org::webrtc::RTCIceProtocol > wrapper::impl::org::webrtc::RTCIceCandidate::get_protocol() noexcept
{
  Optional< wrapper::org::webrtc::RTCIceProtocol > result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< uint16_t > wrapper::impl::org::webrtc::RTCIceCandidate::get_port() noexcept
{
  Optional< uint16_t > result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< wrapper::org::webrtc::RTCIceCandidateType > wrapper::impl::org::webrtc::RTCIceCandidate::get_type() noexcept
{
  Optional< wrapper::org::webrtc::RTCIceCandidateType > result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< wrapper::org::webrtc::RTCIceTcpCandidateType > wrapper::impl::org::webrtc::RTCIceCandidate::get_tcpType() noexcept
{
  Optional< wrapper::org::webrtc::RTCIceTcpCandidateType > result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webrtc::RTCIceCandidate::get_relatedAddress() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
Optional< uint16_t > wrapper::impl::org::webrtc::RTCIceCandidate::get_relatedPort() noexcept
{
  Optional< uint16_t > result {};
  return result;
}

//------------------------------------------------------------------------------
String wrapper::impl::org::webrtc::RTCIceCandidate::get_usernameFragment() noexcept
{
  String result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webrtc::RTCIceCandidate::set_usernameFragment(String value) noexcept
{
}


