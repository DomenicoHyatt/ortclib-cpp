/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 

 */

namespace org
{
  namespace webRtc
  {
    /// <summary>
    /// The RTCSignalingState describes the current state of an offer / 
    /// answer exchanged as it relates to the SDP negotiation process. WHen
    /// JSON style signaling is used the state is always Stable.
    /// </summary>
    enum RTCSignalingState
    {
      /// <summary>
      /// There is no offer­answer exchange in progress. This is also the
      /// initial state in which case the local and remote descriptions are
      /// empty.
      /// </summary>
      stable,
      /// <summary>
      /// A local description, of type "offer", has been successfully
      /// applied.
      /// </summary>
      haveLocalOffer,
      /// <summary>
      /// A remote description of type "offer" has been successfully
      /// applied and a local description of type "pranswer" has been
      /// successfully applied.
      /// </summary>
      haveLocalPranswer,
      /// <summary>
      /// A remote description, of type "offer", has been successfully
      /// applied.
      /// </summary>
      haveRemoteOffer,
      /// <summary>
      /// A local description of type "offer" has been successfully applied
      /// and a remote description of type "pranswer" has been successfully
      /// applied.
      /// </summary>
      haveRemotePranswer,
      /// <summary>
      /// The connection is closed.
      /// </summary>
      closed,
    };

    /// <summary>
    /// RTCIceGatheringState represents the current state of the ICE gatherer.
    /// </summary>
    enum RTCIceGatheringState
    {
      /// <summary>
      /// The object has been created but Gather() has not been called.
      /// </summary>
      new,
      /// <summary>
      /// Gather() has been called, and the RTCIceGatherer is in the process
      /// of gathering candidates (which includes adding new candidates and
      /// removing invalidated candidates).
      /// </summary>
      gathering,
      /// <summary>
      /// The RTCIceGatherer has completed gathering. Events such as adding,
      /// updating or removing an interface, or adding, changing or removing a
      /// TURN server will cause the state to go back to gathering before
      /// re-entering "complete" once all candidate changes are finalized.
      /// </summary>
      complete,
    };


    /// <summary>
    /// The RTCIceConnectionState indicates the combined state of all the
    /// RTCIceTransport objects states.
    /// </summary>
    enum RTCIceConnectionState
    {
      /// <summary>
      /// The ICE Agent is gathering addresses and/or waiting for remote
      /// candidates to be supplied.
      /// </summary>
      new,
      /// <summary>
      /// The ICE Agent has received remote candidates on at least one
      /// component, and is checking candidate pairs but has not yet found a
      /// connection. In addition to checking, it may also still be
      /// gathering.
      /// </summary>
      checking,
      /// <summary>
      /// The ICE Agent has found a usable connection for all components but
      /// is still checking other candidate pairs to see if there is a
      /// better connection. It may also still be gathering.
      /// </summary>
      connected,
      /// <summary>
      /// The ICE Agent has finished gathering and checking and found a
      /// connection for all components. Details on how the completed state
      /// in ICE is reached are covered in [RFC5245].
      /// </summary>
      completed,
      /// <summary>
      /// The ICE Agent is finished checking all candidate pairs and failed
      /// to find a connection for at least one component. Connections may
      /// have been found for some components.
      /// </summary>
      failed,
      /// <summary>
      /// Liveness checks have failed for one or more components. This is
      /// more aggressive than failed, and may trigger intermittently (and
      /// resolve itself without action) on a flaky network.
      /// </summary>
      disconnected,
      /// <summary>
      /// The ICE Agent has shut down and is no longer responding to STUN
      /// requests.
      /// </summary>
      closed,
    };

    /// <summary>
    /// The RTCTlsCertPolicy indicates the TLS certificate policy
    /// </summary>
    enum RTCTlsCertPolicy
    {
      /// <summary>
      /// For TLS based protocols, ensure the connection is secure by not
      /// circumventing certificate validation.
      /// </summary>
      tlsCertPolicySecure,
      /// <summary>
      ///  For TLS based protocols, disregard security completely by skipping
      /// certificate validation. This is insecure and should never be used unless
      /// security is irrelevant in that particular context.
      /// </summary>
      tlsCertPolicyInsecureNoCheck,
    }

    /// <summary>
    /// RTCIceCredentialType represents the type of credential used by a TURN
    /// server.
    /// </summary>
    enum RTCIceCredentialType
    {
      /// <summary>
      /// The credential is a long-term authentication password.
      /// </summary>
      password,
      /// <summary>
      /// An OAuth 2.0 based authentication method, as described in [RFC7635].
      /// </summary>
      oauth,
    };

    /// <summary>
    /// RTCIceTransportPolicy represents the ICE candidate policy
    /// [JSEP] (section 3.5.3.) 
    /// </summary>
    enum RTCIceTransportPolicy
    {
      /// <summary>
      /// The ICE agent has no policy specified.
      /// </summary>
      none,
      
      /// <summary>
      /// The ICE Agent uses only media relay candidates such as candidates passing through a TURN server.
      /// </summary>
      relay,

      /// <summary>
      /// The ICE Agent does not use any system host candidates.
      /// </summary>
      noHost,

      /// <summary>
      /// The ICE Agent can use any type of candidate when this value is specified.
      /// </summary>
      all,
    };

    /// <summary>
    /// RTCBundlePolicy is described in [JSEP] (section 4.1.1.). The bundle
    /// policy affects which media tracks are negotiated if the remote
    /// endpoint is not bundle-aware, and what ICE candidates are gathered.
    /// </summary>
    enum RTCBundlePolicy
    {
      /// <summary>
      /// Gather ICE candidates for each media type in use (audio, video,
      /// and data). If the remote endpoint is not bundle-aware,
      /// negotiate only one audio and video track on separate transports.
      /// </summary>
      balanced,
      /// <summary>
      /// Gather ICE candidates for only one track. If the remote endpoint
      /// is not bundle-aware, negotiate only one media track.
      /// </summary>
      maxBundle,
      /// <summary>
      /// Gather ICE candidates for each track. If the remote endpoint is
      /// not bundle-aware, negotiate all media tracks on separate transports.
      /// </summary>
      maxCompat,
    };


    /// <summary>
    /// RTCRtcpMuxPolicy is described in [JSEP] (section 4.1.1.). The
    /// RtcpMuxPolicy affects what ICE candidates are gathered to
    /// support non-multiplexed RTCP.
    /// </summary>
    enum RTCRtcpMuxPolicy
    {
      /// <summary>
      /// Gather ICE candidates for both RTP and RTCP candidates. If the
      /// remote-endpoint is capable of multiplexing RTCP, multiplex RTCP
      /// on the RTP candidates. If it is not, use both the RTP and RTCP
      /// candidates separately. Note that, as stated in [JSEP] (section 4.1.1.),
      /// the user agent MAY not implement non-multiplexed RTCP, in
      /// which case it will reject attempts to construct an RTCPeerConnection
      /// with the negotiate policy.
      /// </summary>
      negotiate,
      /// <summary>
      /// Gather ICE candidates only for RTP and multiplex RTCP on the RTP
      /// candidates. If the remote endpoint is not capable of rtcp-mux, session
      /// negotiation will fail.
      /// </summary>
      require,
    };

    enum RTCTcpCandidatePolicy {
      enabled,
      disabled,
    };


    enum RTCCandidateNetworkPolicy {
      all,
      lowCost,
    };


    enum RTCContinualGatheringPolicy {
      once,
      continually,
    };

    enum RTCConfigurationType {
      /// <summary>
      /// A configuration that is safer to use, despite not having the best
      /// performance. Currently this is the default configuration.
      /// </summary>
      safe,
      /// <summary>
      /// An aggressive configuration that has better performance, although it
      /// may be riskier and may need extra support in the application.
      /// </summary>
      aggressive
    };

    /// <summary>
    /// This enum resembles the one in Chromium net::ConnectionType.
    /// </summary>
    enum RTCNetworkType {
      unknown = 0,
      ethernet = 1,
      wifi = 2,
      cellular = 4,
      vpn = 8,
      loopback = 16,
      bluetooth = 32,
      wimax = 64,      
    };

    /// <summary>
    /// For now, kDefault is interpreted as kPlanB.
    /// </summary>
    enum RTCSdpSemantics
    {
      default,
      planB,
      unifiedPlan
    };

    /// <summary>
    /// Used by GetStats to decide which stats to include in the stats reports.
    /// |standard| includes the standard stats for Javascript API;
    /// |debug| includes both the standard stats and additional
    /// stats for debugging purposes.
    /// <summary>
    enum RTCStatsOutputLevel {
      standard,
      debug,
    };

    enum MediaSourceState {
      initializing,
      live,
      ended,
      muted
    };

    enum MediaStreamTrackState {
      live,
      ended,
    };

    /// <summary>
    /// Enumeration to represent distinct classes of errors that an application
    /// may wish to act upon differently. These roughly map to DOMExceptions or
    /// RTCError "errorDetailEnum" values in the web API, as described in the
    /// comments below.
    /// <summary>
    enum RTCErrorType {
      /// <summary>
      /// No error.
      /// </summary>
      none,

      /// <summary>
      /// An operation is valid, but currently unsupported.
      /// Maps to OperationError DOMException.
      /// </summary>
      unsupportedOperation,

      /// <summary>
      /// A supplied parameter is valid, but currently unsupported.
      /// Maps to OperationError DOMException.
      /// </summary>
      unsupportedParameter,

      /// <summary>
      /// General error indicating that a supplied parameter is invalid.
      /// Maps to InvalidAccessError or TypeError DOMException depending on context.
      /// </summary>
      invalidParameter,

      /// <summary>
      /// Slightly more specific than invalidParameter; a parameter's value was
      /// outside the allowed range.
      /// Maps to RangeError DOMException.
      /// </summary>
      invalidRange,

      /// <summary>
      /// Slightly more specific than invalidParameter; an error occurred while
      /// parsing string input.
      /// Maps to SyntaxError DOMException.
      /// </summary>
      syntaxError,

      /// <summary>
      /// The object does not support this operation in its current state.
      /// Maps to InvalidStateError DOMException.
      /// </summary>
      invalidState,

      /// <summary>
      /// An attempt was made to modify the object in an invalid way.
      /// Maps to InvalidModificationError DOMException.
      /// </summary>
      invalidModification,

      /// <summary>
      /// An error occurred within an underlying network protocol.
      /// Maps to NetworkError DOMException.
      /// </summary>
      networkError,

      /// <summary>
      /// Some resource has been exhausted; file handles, hardware resources, ports,
      /// etc.
      /// Maps to OperationError DOMException.
      /// </summary>
      resourceExhausted,

      /// <summary>
      /// The operation failed due to an internal error.
      /// Maps to OperationError DOMException.
      /// </summary>
      internalError,
    };

    /// <summary>
    /// RTCStatsType object is initialized to the name of the dictionary that
    /// the RTCStats represents.
    /// </summary>
    enum RTCStatsType
    {
      /// <summary>
      /// Statistics for a codec that is currently being used by RTP streams being
      /// sent or received by this RTCPeerConnection object. It is accessed by the RTCCodecStats.
      /// </summary>
      codec,
      /// <summary>
      /// Statistics for an inbound RTP stream that is currently received with this
      /// RTCPeerConnection object. It is accessed by the RTCInboundRtpStreamStats.
      /// </summary>
      inboundRtp,
      /// <summary>
      /// Statistics for an outbound RTP stream that is currently sent with
      /// this RTCPeerConnection object. It is accessed by the RTCOutboundRtpStreamStats.
      /// </summary>
      outboundRtp,
      /// <summary>
      /// Statistics for the remote endpoint's inbound RTP stream corresponding to
      /// an outbound stream that is currently sent with this RTCPeerConnection object.
      /// It is measured at the remote endpoint and reported in an RTCP Receiver Report
      /// (RR) or RTCP Extended Report (XR). It is accessed by the RTCRemoteInboundRtpStreamStats.
      /// </summary>
      remoteInboundRtp,
      /// <summary>
      /// Statistics for the remote endpoint's outbound RTP stream corresponding to
      /// an inbound stream that is currently received with this RTCPeerConnection
      /// object. It is measured at the remote endpoint and reported in an RTCP Sender
      /// Report (SR). It is accessed by the RTCRemoteOutboundRtpStreamStats.
      /// </summary>
      remoteOutboundRtp,
      /// <summary>
      /// Statistics for a contributing source (CSRC) that contributed to an
      /// inbound RTP stream. It is accessed by the RTCRtpContributingSourceStats.
      /// </summary>
      csrc,
      /// <summary>
      /// Statistics related to the RTCPeerConnection object. It is accessed by the RTCPeerConnectionStats.
      /// </summary>
      peerConnection,
      /// <summary>
      /// Statistics related to each RTCDataChannel id. It is accessed by the RTCDataChannelStats.
      /// </summary>
      dataChannel,
      /// <summary>
      /// Contains statistics related to a specific MediaStream. It is accessed by the RTCMediaStreamStats.
      /// </summary>
      stream,
      /// <summary>
      /// Contains statistics related to a specific MediaStreamTrack's attachment to an RTCRtpSender
      /// and the corresponding media-level metrics. It is accessed by either
      /// RTCSenderVideoTrackAttachmentStats or RTCSenderAudioTrackAttachmentStats, both inherited from RTCMediaHandlerStats.
      /// 
      /// The monitored "track" object is deleted when the sender it reports on has its "track" value changed
      /// to no longer refer to the same track.
      /// </summary>
      track,
      /// <summary>
      /// Contains statistics related to a specific RTCRtpSender and the corresponding media-level metrics.
      /// It is accessed by the RTCAudioSenderStats or the RTCVideoSenderStats depending on kind.
      /// </summary>
      sender,
      /// <summary>
      /// Contains statistics related to a specific receiver and the corresponding media-level metrics.
      /// It is accessed by the RTCAudioReceiverStats or the RTCVideoSenderStats depending on kind.
      /// </summary>
      receiver,
      /// <summary>
      /// Transport statistics related to the RTCPeerConnection object. It is accessed by the RTCTransportStats.
      /// </summary>
      transport,
      /// <summary>
      /// ICE candidate pair statistics related to the RTCIceTransport objects. It is accessed by
      /// the RTCIceCandidatePairStats.
      ///
      /// A candidate pair that is not the current pair for a transport is deleted when the RTCIceTransport
      /// does an ICE restart, at the time the state changes to "new". The candidate pair that is the current
      /// pair for a transport is deleted after an ICE restart when the RTCIceTransport switches to using a
      /// candidate pair generated from the new candidates; this time doesn't correspond to any other
      /// externally observable event.
      /// </summary>
      candidatePair,
      /// <summary>
      /// ICE local candidate statistics related to the RTCIceTransport objects. It is accessed
      /// by the RTCIceCandidateStats for the local candidate.
      ///
      /// A local candidate is deleted when the RTCIceTransport does an ICE restart, and the candidate
      /// is no longer a member of any non-deleted candidate pair.
      /// </summary>
      localCandidate,
      /// <summary>
      /// ICE remote candidate statistics related to the RTCIceTransport objects. It is accessed by
      /// the RTCIceCandidateStats for the remote candidate.
      ///
      /// A remote candidate is deleted when the RTCIceTransport does an ICE restart, and the candidate
      /// is no longer a member of any non-deleted candidate pair.
      /// </summary>
      remoteCandidate,
      /// <summary>
      /// Information about a certificate used by an RTCIceTransport. It is accessed by the RTCCertificateStats.
      /// </summary>
      certificate
    };

    /// <summary>
    /// RTCDataChannelState represents the state of the RTCDataChannel object. 
    /// </summary>
    enum RTCDataChannelState
    {
      /// <summary>
      /// The user agent is attempting to establish the underlying data
      /// transport. This is the initial state of an RTCDataChannel object,
      /// whether created with createDataChannel, or dispatched as a part
      /// of an RTCDataChannelEvent.
      /// </summary>
      connecting,
      /// <summary>
      /// The underlying data transport is established and communication is possible.
      /// </summary>
      open,
      /// <summary>
      /// The procedure to close down the underlying data transport has started.
      /// </summary>
      closing,
      /// <summary>
      /// The underlying data transport has been closed or could not be established.
      /// </summary>
      closed,
    };

    /// <summary>
    /// The RTCIceCandidateType includes the type of the ICE candidate.
    /// </summary>
    enum RTCIceCandidateType
    {
      /// <summary>
      /// A host candidate, defined in [RFC5245] Section 3.
      /// </summary>
      host,
      /// <summary>
      /// A server reflexive candidate, defined in [RFC5245] Section 3.
      /// </summary>
      srflex,
      /// <summary>
      /// A peer reflexive candidate, defined in [RFC5245] Section 3.
      /// </summary>
      prflx,
      /// <summary>
      /// A relay candidate, defined in [RFC5245] Section 3.
      /// </summary>
      relay,
    };

    /// <summary>
    /// Candidate pair state is defined in Section 5.7.4 of [RFC5245].
    /// </summary>
    enum RTCStatsIceCandidatePairState
    {
      /// <summary>
      /// Defined in Section 5.7.4 of [RFC5245].
      /// </summary>
      frozen,
      /// <summary>
      /// Defined in Section 5.7.4 of [RFC5245].
      /// </summary>
      waiting,
      /// <summary>
      /// Defined in Section 5.7.4 of [RFC5245].
      /// </summary>
      inProgress,
      /// <summary>
      /// Defined in Section 5.7.4 of [RFC5245].
      /// </summary>
      failed,
      /// <summary>
      /// Defined in Section 5.7.4 of [RFC5245].
      /// </summary>
      succeeded,
      /// <summary>
      /// Defined in Section 5.7.4 of [RFC5245].
      /// </summary>
      cancelled,
    };

    enum RTCPriorityType {
      /// <summary>
      /// See [RTCWEB-TRANSPORT], Section 4. Corresponds to "below normal" as defined in [RTCWEB-DATA].
      /// </summary>
      veryLow,
      /// <summary>
      /// See [RTCWEB-TRANSPORT], Section 4. Corresponds to "normal" as defined in [RTCWEB-DATA].
      /// </summary>
      low,
      /// <summary>
      /// See [RTCWEB-TRANSPORT], Section 4. Corresponds to "high" as defined in [RTCWEB-DATA].
      /// </summary>
      medium,
      /// <summary>
      /// See [RTCWEB-TRANSPORT], Section 4. Corresponds to "extra high" as defined in [RTCWEB-DATA]
      /// </summary>
      high
    };

    /// <summary>
    /// The RTCSdpType enum describes the type of RTCSessionDescription
    /// instance.
    /// </summary>
    enum RTCSdpType
    {
      /// <summary>
      /// An RTCSdpType of offer indicates that a description must be
      /// treated as an [RTC3264] offer.
      /// </summary>
      offer,
      /// <summary>
      /// An RTCSdpType of pranswer indicates that a description must be
      /// treated as an [RTC3264] answer, but not a final answer. A
      /// description used as an SDP pranswer may be applied as a response
      /// to an SDP offer, or an update to a previously sent SDP pranswer.
      /// </summary>
      pranswer,
      /// <summary>
      /// The format of the description is that of an SDP answer.
      /// </summary>
      answer,
      /// <summary>
      /// The format of the description is that of an SDP rollback.
      /// </summary>
      rollback,
    };


    /// <summary>
    /// RTCIceComponent contains the component-id of the RTCIceTransport,
    /// which will be "RTP" unless RTP and RTCP are not multiplexed and the
    /// RTCIceTransport object was returned by createAssociatedTransport().
    /// </summary>
    enum RTCIceComponent
    {
      /// <summary>
      /// The RTP component ID, defined (as '1') in [RFC5245] Section 4.1.1.1.
      /// Protocols multiplexed with RTP (e.g. SCTP data channel) share its
      /// component ID.
      /// </summary>
      rtp = 1,
      /// <summary>
      /// The RTCP component ID, defined (as '2') in [RFC5245] Section
      /// 4.1.1.1.
      /// </summary>
      rtcp = 2,
    };


    enum RTCIceProtocol
    {
      /// <summary>
      /// A UDP candidate, as described in [RFC5245].
      /// </summary>
      udp,
      /// <summary>
      /// A TCP candidate, as described in [RFC5245].
      /// </summary>
      tcp,
    };


    /// <summary>
    /// The RTCIceTcpCandidateType includes the type of the ICE TCP candidate,
    /// as described in [RFC6544]. 
    /// </summary>
    enum RTCIceTcpCandidateType
    {
      /// <summary>
      /// An active TCP candidate is one for which the transport will attempt
      /// to open an outbound connection but will not receive incoming
      /// connection requests.
      /// </summary>
      active,
      /// <summary>
      /// A passive TCP candidate is one for which the transport will receive
      /// incoming connection attempts but not attempt a connection.
      /// </summary>
      passive,
      /// <summary>
      /// An so candidate is one for which the transport will attempt to open
      /// a connection simultaneously with its peer.
      /// </summary>
      so,
    };

    enum RTCKeyType {
      /// <summary>
      /// Default key type used (currently ecdsa).
      /// </summary>
      default,
      /// <summary>
      /// RSA public key.
      /// </summary>
      rsa,
      /// <summary>
      /// Ellipical curve public key.
      /// </summary>
      ecdsa,
    };

    enum RTCECCurve {
      nistP256
    };

    enum RTCPeerConnectionState {
      /// <summary>
      /// Any of the RTCIceTransports or RTCDtlsTransports are in the
      /// "new" state and none of the transports are in the
      /// "connecting", "checking", "failed" or "disconnected"
      /// state, or all transports are in the "closed" state, or
      /// there are no transports.
      /// </summary>
      new,
      /// <summary>
      /// Any of the RTCIceTransports or RTCDtlsTransports are in
      /// the "connecting" or "checking" state and none of them is
      /// in the "failed" state.
      /// </summary>
      connecting,
      /// <summary>
      /// All RTCIceTransports and RTCDtlsTransports are in the
      /// "connected", "completed" or "closed" state and at least
      /// one of them is in the "connected" or "completed" state.
      /// </summary>
      connected,
      /// <summary>
      /// Any of the RTCIceTransports or RTCDtlsTransports are in
      /// the "disconnected" state and none of them are in the
      /// "failed" or "connecting" or "checking" state.
      /// </summary>
      disconnected,
      /// <summary>
      /// Any of the RTCIceTransports or RTCDtlsTransports are
      /// in a "failed" state.
      /// </summary>
      failed,
      /// <summary>
      /// The RTCPeerConnection object's [[IsClosed]] slot is true.
      /// </summary>
      closed
    };

    enum RTCDtxStatus {
      /// <summary>
      /// Discontinuous transmission is disabled.
      /// </summary>
      disabled,
      /// <summary>
      /// Discontinuous transmission is enabled if negotiated.
      /// </summary>
      enabled
    };

    enum RTCDegradationPreference {
      /// <summary>
      /// Degrade resolution in order to maintain framerate.
      /// </summary>
      maintainFramerate,
      /// <summary>
      /// Degrade framerate in order to maintain resolution.
      /// </summary>
      maintainResolution,
      /// <summary>
      /// Degrade a balance of framerate and resolution.
      /// </summary>
      balanced
    };

    enum RTCRtpTransceiverDirection {
      /// <summary>
      /// The RTCRtpTransceiver's RTCRtpSender sender will offer to
      /// send RTP, and will send RTP if the remote peer accepts and
      /// sender.getParameters().encodings[i].active is true for any
      /// value of i. The RTCRtpTransceiver's RTCRtpReceiver will
      /// offer to receive RTP, and will receive RTP if the remote
      /// peer accepts.
      /// </summary>
      sendrecv,
      /// <summary>
      /// The RTCRtpTransceiver's RTCRtpSender sender will offer to
      /// send RTP, and will send RTP if the remote peer accepts and
      /// sender.getParameters().encodings[i].active is true for any
      /// value of i. The RTCRtpTransceiver's RTCRtpReceiver will not
      /// offer to receive RTP, and will not receive RTP.
      /// </summary>
      sendonly,
      /// <summary>
      /// The RTCRtpTransceiver's RTCRtpSender will not offer to send
      /// RTP, and will not send RTP. The RTCRtpTransceiver's
      /// RTCRtpReceiver will offer to receive RTP, and will receive
      /// RTP if the remote peer accepts.
      /// </summary>
      recvonly,
      /// <summary>
      /// The RTCRtpTransceiver's RTCRtpSender will not offer to
      /// send RTP, and will not send RTP. The RTCRtpTransceiver's
      /// RTCRtpReceiver will not offer to receive RTP, and will
      /// not receive RTP.
      /// </summary>
      inactive
    };


    /// <summary>
    /// Current state of the capturer.
    /// </summary>
    enum VideoCaptureState
    {
      /// <summary>
      /// The capturer has been stopped or hasn't started yet.
      /// </summary>
      stopped,
      /// <summary>
      /// The capturer is in the process of starting. Note, it may still fail to start.
      /// </summary>
      starting,
      /// <summary>
      /// The capturer has been started successfully and is now capturing.
      /// </summary>
      running,
      /// <summary>
      /// The capturer failed to start.
      /// </summary>
      failed,
    };

    enum RTCCodecType
    {
      /// <summary>
      /// The attached RTCCodecStats represents a media format that is
      /// being encoded, or that the implementation is prepared to encode.
      /// </summary>
      encode,
      /// <summary>
      /// The attached RTCCodecStats represents a media format that
      /// the implementation is prepared to decode.
      /// </summary>
      decode,
    };

    enum RTCQualityLimitationReason {
      /// <summary>
      /// The resolution and/or framerate is not limited.
      /// </summary>
      none,
      /// <summary>
      /// The resolution and/or framerate is primarily limited due to CPU load.
      /// </summary>
      cpu,
      /// <summary>
      /// The resolution and/or framerate is primarily limited due to congestion
      /// cues during bandwidth estimation. Typical, congestion control algorithms
      /// use inter-arrival time, round-trip time, packet or other congestion cues
      /// to perform bandwidth estimation.
      /// </summary>
      bandwidth,
      /// <summary>
      /// The resolution and/or framerate is primarily limited for a reason other than the above.
      /// </summary>
      other,
    };

    enum RTCIceRole {
      /// <summary>
      /// A controlling agent as defined by [ICE], Section 3.
      /// </summary>
      controlling,
      /// <summary>
      /// A controlled agent as defined by [ICE], Section 3.
      /// </summary>
      controlled
    };

    enum RTCDtlsTransportState {
      /// <summary>
      /// DTLS has not started negotiating yet.
      /// </summary>
      new,
      /// <summary>
      /// DTLS is in the process of negotiating a secure connection and verifying the remote fingerprint.
      /// </summary>
      connecting,
      /// <summary>
      /// DTLS has completed negotiation of a secure connection and verified the remote fingerprint.
      /// </summary>
      connected,
      /// <summary>
      /// The transport has been closed intentionally as the result of receipt of a
      /// close_notify alert, or calling close().
      /// </summary>
      closed,
      /// <summary>
      /// The transport has failed as the result of an error (such as receipt of an error alert
      /// or failure to validate the remote fingerprint).
      /// </summary>
      failed
    };

  }
}

