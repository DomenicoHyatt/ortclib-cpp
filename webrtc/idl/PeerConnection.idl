/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    [dictionary]
    struct RTCBitrateParameters {
      [optional]
      int minBitrateBps;
      [optional]
      int currentBitrateBps;
      [optional]
      int maxBitrateBps;
    };

    /// <summary>
    /// The icecandidate event of the RTCPeerConnection uses the
    /// RTCPeerConnectionIceEvent interface.
    /// </summary>
    interface RTCPeerConnectionIceEvent {
      [constructor, delete, default]
      void RTCPeerConnectionIceEvent();

      /// <summary>
      /// Gets the attribute for the RTCIceCandidate object with
      /// the new ICE candidate that caused the event.
      /// </summary>
      [getter]
      RTCIceCandidate candidate;
      /// <summary>
      /// Gets the url attribute for to the STUN or TURN URL that
      /// identifies the STUN or TURN server used to gather this
      /// candidate. If the candidate was not gathered from a STUN or
      /// TURN server, this parameter will be set to empty.
      /// </summary>
      [getter]
      string url;
    };

    /// <summary>
    /// The track event uses the RTCTrackEvent interface.
    /// </summary>
    interface RTCTrackEvent  {
      [constructor, delete, default]
      void RTCTrackEvent();

      /// <summary>
      /// Gets the attribute representing the RTCRtpReceiver object associated with the event.
      /// </summary>
      [getter]
      RTCRtpReceiver           receiver;
      /// <summary>
      /// Gets the attribute representing the MediaStreamTrack object that
      /// is associated with the RTCRtpReceiver identified by receiver.
      /// </summary>
      [getter]
      MediaStreamTrack         track;
      /// <summary>
      /// Gets the attribute representing the RTCRtpTransceiver
      /// object associated with the event.
      /// </summary>
      [getter]
      RTCRtpTransceiver        transceiver;
    };

    interface RTCPeerConnectionIceErrorEvent {
      [constructor, delete, default]
      void RTCPeerConnectionIceErrorEvent();

      /// <summary>
      /// Gets the attribute for the local IP address and port used to
      /// communicate with the STUN or TURN server.
      /// </summary>
      [getter]
      string          hostCandidate;
      /// <summary>
      /// Gets the url for the STUN or TURN URL that identifies the
      /// STUN or TURN server for which the failure occurred.
      /// </summary>
      [getter]
      string          url;
      /// <summary>
      /// Gets the attribute for the numeric STUN error code returned
      /// by the STUN or TURN server [STUN-PARAMETERS].
      /// </summary>
      [getter]
      unsigned short  errorCode;
      /// <summary>
      /// Gets the errorText attribute is the STUN reason text
      /// returned by the STUN or TURN server [STUN-PARAMETERS].
      /// </summary>
      [getter]
      string          errorText;
    };

    [dictionary]
    struct RTCRtpTransceiverInit {
      RTCRtpTransceiverDirection          direction = sendrecv;
      std::list<RTCRtpEncodingParameters> sendEncodings;
    };

    /// <summary>
    /// The [JSEP] specification, as a whole, describes the details of how
    /// the RTCPeerConnection operates. References to specific subsections of
    /// [JSEP] are provided as appropriate.
    /// </summary>
    [disposable]
    interface RTCPeerConnection : RTCStatsProvider
    {
      /// <summary>
      /// The generateCertificate function causes the user agent to create
      /// and store an X.509 certificate [X509V3] and corresponding private
      /// key. A handle to information is provided in the form of the
      /// RTCCertificate interface. The returned RTCCertificate can be used
      /// to control the certificate that is offered in the DTLS sessions
      /// established by RTCPeerConnection.
      /// </summary>
      [static]
      PromiseWithRTCCertificate generateCertificate(RTCKeyParams keygenAlgorithm);

      /// <summary>
      /// Constructs an RTCPeerConnection with an RTCConfiguration.
      /// </summary>
      [constructor,default]
      void RTCPeerConnection(RTCConfiguration config);

      /// <summary>
      /// The createOffer method generates a blob of SDP that contains an RFC 3264
      /// offer with the supported configurations for the session, including
      /// descriptions of the local MediaStreamTracks attached to this
      /// RTCPeerConnection, the codec/RTP/RTCP capabilities supported by this
      /// implementation, and parameters of the ICE agent and the DTLS connection.
      /// The options parameter may be supplied to provide additional control over
      /// the offer generated.
      /// </summary>
      [default]
      PromiseWithDescription createOffer(RTCOfferOptions options);
      /// <summary>
      /// The createOffer method generates a blob of SDP that contains an RFC 3264
      /// offer with the supported configurations for the session, including
      /// descriptions of the local MediaStreamTracks attached to this
      /// RTCPeerConnection, the codec/RTP/RTCP capabilities supported by this
      /// implementation, and parameters of the ICE agent and the DTLS connection.
      /// The options parameter may be supplied to provide additional control over
      /// the offer generated.
      /// </summary>
      [altname(createOfferWithConstraints)]
      PromiseWithDescription createOffer(MediaConstraints constraints);
      /// <summary>
      /// The createAnswer method generates an [SDP] answer with the supported
      /// configuration for the session that is compatible with the parameters in
      /// the remote configuration. Like createOffer, the returned blob of SDP contains
      /// descriptions of the local MediaStreamTracks attached to this RTCPeerConnection,
      /// the codec/RTP/RTCP options negotiated for this session, and any candidates
      /// that have been gathered by the ICE Agent. The options parameter may be
      /// supplied to provide additional control over the generated answer.
      /// </summary>
      [default]
      PromiseWithDescription createAnswer(RTCAnswerOptions options);
      /// <summary>
      /// The createAnswer method generates an [SDP] answer with the supported
      /// configuration for the session that is compatible with the parameters in
      /// the remote configuration. Like createOffer, the returned blob of SDP contains
      /// descriptions of the local MediaStreamTracks attached to this RTCPeerConnection,
      /// the codec/RTP/RTCP options negotiated for this session, and any candidates
      /// that have been gathered by the ICE Agent. The options parameter may be
      /// supplied to provide additional control over the generated answer.
      /// </summary>
      [altname(createAnswerWithConstraints)]
      PromiseWithDescription createAnswer(MediaConstraints constraints);

      /// <summary>
      /// The setLocalDescription method instructs the RTCPeerConnection to
      /// apply the supplied RTCSessionDescriptionInit as the local description.
      /// </summary>
      Promise setLocalDescription(RTCSessionDescription constraints);
      /// <summary>
      /// The setRemoteDescription method instructs the RTCPeerConnection
      /// to apply the supplied RTCSessionDescriptionInit as the remote offer
      /// or answer. This API changes the local media state.
      /// </summary>
      Promise setRemoteDescription(RTCSessionDescription constraints);

      /// <summary>
      /// Returns an RTCConfiguration object representing the current
      /// configuration of this RTCPeerConnection object.
      /// </summary>
      RTCConfiguration getConfiguration();

      /// <summary>
      /// The setConfiguration method updates the configuration of this
      /// RTCPeerConnection object. This includes changing the configuration
      /// of the ICE Agent. As noted in [JSEP] (section 3.5.1.), when the
      /// ICE configuration changes in a way that requires a new gathering
      /// phase, an ICE restart is required.
      /// </summary>
      void setConfiguration(RTCConfiguration config) throws (RTCError);

      /// <summary>
      /// The addIceCandidate method provides a remote candidate to the ICE
      /// Agent. This method can also be used to indicate the end of remote
      /// candidates when called with an empty string for the candidate
      /// member. The only members of the argument used by this method are
      /// candidate, sdpMid, sdpMLineIndex, and usernameFragment; the rest
      /// are ignored. 
      /// </summary>
      Promise addIceCandidate(RTCIceCandidate candidate);

      /// <summary>
      /// Removes a group of remote candidates from the ICE agent. Needed mainly for
      /// continual gathering, to avoid an ever-growing list of candidates as
      /// networks come and go.
      /// </summary>
      void removeIceCandidates(RTCIceCandidates candidates);

      /// <summary>
      /// SetBitrate limits the bandwidth allocated for all RTP streams sent by
      /// this PeerConnection. Other limitations might affect these limits and
      /// are respected (for example "b=AS" in SDP).
      ///
      /// Setting |current_bitrate_bps| will reset the current bitrate estimate
      /// to the provided value.
      /// </summary>
      void setBitrate(RTCBitrateParameters params) throws (RTCError);

      /// <summary>
      /// Gets the attribute returning the RTCPeerConnection object's signaling state.
      /// </summary>
      [getter]
      RTCSignalingState       signalingState;
      /// <summary>
      /// Gets the attribute returning the ICE gathering state of the RTCPeerConnection instance.
      /// </summary>
      [getter]
      RTCIceGatheringState    iceGatheringState;
      /// <summary>
      /// Gets the attribute returning the ICE connection state of the RTCPeerConnection instance.
      /// </summary>
      [getter]
      RTCIceConnectionState   iceConnectionState;
      /// <summary>
      /// Gets the attribute returning the connection state of the RTCPeerConnection instance.
      /// </summary>
      [getter, optional]
      RTCPeerConnectionState  connectionState_NotAvailable;

      /// <summary>
      /// The canTrickleIceCandidates attribute indicates whether the remote peer is
      /// able to accept trickled ICE candidates [TRICKLE-ICE]. The value is determined
      /// based on whether a remote description indicates support for trickle ICE, as
      /// defined in [JSEP] (section 4.1.15.). Prior to the completion of
      /// setRemoteDescription, this value is not set.
      /// </summary>
      [getter,optional]
      bool                    canTrickleIceCandidates_NotAvailable;

      /// <summary>
      /// Closes the RTCPeerConnection object.
      /// </summary>
      void close();

      /// <summary>
      /// Adds a new track to the RTCPeerConnection, and indicates that it is
      /// contained in the specified MediaStreams.
      /// </summary>
      RTCRtpSender addTrack(MediaStreamTrack track) throws (RTCError);

      /// <summary>
      /// Stops sending media from sender. The RTCRtpSender will still
      /// appear in getSenders. Doing so will cause future calls to
      /// createOffer to mark the media description for the corresponding
      /// transceiver as recvonly or inactive, as defined in [JSEP] (section 5.2.2.).
      /// </summary>
      bool removeTrack(RTCRtpSender sender);

      /// <summary>
      /// The RTCRtpTransceiver interface represents a combination of an
      /// RTCRtpSender and an RTCRtpReceiver that share a common mid. As
      /// defined in [JSEP] (section 3.4.1.), an RTCRtpTransceiver is said
      /// to be associated with a media description if its mid property is
      /// non-null; otherwise it is said to be disassociated. Conceptually,
      /// an associated transceiver is one that's represented in the last
      /// applied session description.
      /// </summary>
      [default]
      RTCRtpTransceiver addTransceiver(MediaStreamTrack track) throws (RTCError);

      /// <summary>
      /// The RTCRtpTransceiver interface represents a combination of an
      /// RTCRtpSender and an RTCRtpReceiver that share a common mid. As
      /// defined in [JSEP] (section 3.4.1.), an RTCRtpTransceiver is said
      /// to be associated with a media description if its mid property is
      /// non-null; otherwise it is said to be disassociated. Conceptually,
      /// an associated transceiver is one that's represented in the last
      /// applied session description.
      /// </summary>
      [default, altname(addTransceiverWithInit)]
      RTCRtpTransceiver addTransceiver(MediaStreamTrack track, RTCRtpTransceiverInit init) throws (RTCError);


      /// <summary>
      /// The RTCRtpTransceiver interface represents a combination of an
      /// RTCRtpSender and an RTCRtpReceiver that share a common mid. As
      /// defined in [JSEP] (section 3.4.1.), an RTCRtpTransceiver is said
      /// to be associated with a media description if its mid property is
      /// non-null; otherwise it is said to be disassociated. Conceptually,
      /// an associated transceiver is one that's represented in the last
      /// applied session description.
      /// </summary>
      [altName(addTransceiverWithKind)]
      RTCRtpTransceiver addTransceiver(string kind) throws (RTCError);

      RTCRtpSender addSender(string kind, string trackId);

      /// <summary>
      /// Returns a sequence of RTCRtpSender objects representing the RTP
      /// senders that are currently attached to this RTCPeerConnection object.
      /// </summary>
      RTCRtpSenders getSenders();

      /// <summary>
      /// Returns a sequence of RTCRtpReceiver objects representing the RTP
      /// receivers that are currently attached to this RTCPeerConnection object.
      /// </summary>
      RTCRtpReceivers getReceivers();


      /// <summary>
      /// Returns a sequence of RTCRtpTransceiver objects representing the RTP
      /// transceivers that are currently attached to this RTCPeerConnection object.
      /// </summary>
      RTCRtpTransceivers getTransceivers();

      /// <summary>
      /// Creates a new RTCDataChannel object with the given label. The
      /// RTCDataChannelInit dictionary can be used to configure properties
      /// of the underlying channel such as data reliability.
      /// </summary>
      RTCDataChannel createDataChannel(string label, RTCDataChannelInit init);

      /// <summary>
      /// Gets the attribute returning [[PendingLocalDescription]] if it is not
      /// null and otherwise it MUST return [[CurrentLocalDescription]].
      ///
      /// Note that [[CurrentLocalDescription]].sdp and
      /// [[PendingLocalDescription]].sdp need not be string-wise identical
      /// to the SDP value passed to the corresponding setLocalDescription call
      /// (i.e. SDP may be parsed and reformatted, and ICE candidates may be added).
      /// </summary>
      [getter]
      RTCSessionDescription localDescription;

      /// <summary>
      /// Gets the attribute returning [[CurrentLocalDescription]].
      /// It represents the local description that was successfully negotiated the
      /// last time the RTCPeerConnection transitioned into the stable state plus
      /// any local candidates that have been generated by the ICE Agent since the offer or answer was created.
      /// </summary>
      [getter]
      RTCSessionDescription currentLocalDescription;

      /// <summary>
      /// Gets the pendingLocalDescription attribute MUST return [[PendingLocalDescription]].
      ///
      /// It represents a local description that is in the process of being negotiated
      /// plus any local candidates that have been generated by the ICE Agent since the
      /// offer or answer was created. If the RTCPeerConnection is in the stable state, the
      /// value is null.
      /// </summary>
      [getter]
      RTCSessionDescription pendingLocalDescription;

      /// <summary>
      /// Gets the remoteDescription attribute MUST return [[PendingRemoteDescription]] if
      /// it is not null and otherwise it MUST return [[CurrentRemoteDescription]].
      ///
      /// Note that [[CurrentRemoteDescription]].sdp and [[PendingRemoteDescription]].sdp need
      /// not be string-wise identical to the SDP value passed to the corresponding
      /// setRemoteDescription call (i.e. SDP may be parsed and reformatted, and ICE
      /// candidates may be added).
      /// </summary>
      [getter]
      RTCSessionDescription remoteDescription;

      /// <summary>
      /// Gets the currentRemoteDescription attribute MUST return [[CurrentRemoteDescription]].
      ///
      /// It represents the last remote description that was successfully negotiated the last
      /// time the RTCPeerConnection transitioned into the stable state plus any remote candidates
      /// that have been supplied via addIceCandidate() since the offer or answer was created.
      /// </summary>
      [getter]
      RTCSessionDescription currentRemoteDescription;

      /// <summary>
      /// Gets the pendingRemoteDescription attribute MUST return [[PendingRemoteDescription]].
      ///
      /// It represents a remote description that is in the process of being negotiated, complete
      /// with any remote candidates that have been supplied via addIceCandidate() since the
      /// offer or answer was created. If the RTCPeerConnection is in the stable state, the
      /// value is null.
      /// </summary>
      [getter]
      RTCSessionDescription pendingRemoteDescription;

      /// <summary>
      /// A new RTCDataChannel is dispatched to the script in response to the other peer creating a channel.
      /// </summary>
      [event]
      void onDataChannel(RTCDataChannelEvent event);

      /// <summary>
      /// The browser wishes to inform the application that session negotiation needs to be done (i.e. a createOffer call followed by setLocalDescription).
      /// </summary>
      [event]
      void onNegotiationNeeded();

      /// <summary>
      /// A new RTCIceCandidate is made available to the script.
      /// </summary>
      [event]
      void onIceCandidate(RTCPeerConnectionIceEvent event);

      /// <summary>
      /// An RTCIceCandidate is no longer available to the script.
      /// </summary>
      [event]
      void onIceCandidateRemoved(RTCPeerConnectionIceEvent event);

      /// <summary>
      /// A failure occured when gathering ICE candidates.
      /// </summary>
      [event]
      void onIceCandidateError();

      /// <summary>
      /// The signaling state has changed. This state change is the result of either setLocalDescription or setRemoteDescription being invoked.
      /// </summary>
      [event]
      void onSignalingStateChange();

      /// <summary>
      /// The RTCPeerConnection's ICE connection state has changed.
      /// </summary>
      [event]
      void onIceConnectionStateChange();

      /// <summary>
      /// The RTCPeerConnection's ICE gathering state has changed.
      /// </summary>
      [event]
      void onIceGatheringStateChange();

      /// <summary>
      /// The RTCPeerConnection connectionState has changed.
      /// </summary>
      [event]
      void onConnectionStateChange();

      /// <summary>
      /// New incoming media has been negotiated for a specific RTCRtpReceiver, and that
      /// receiver's track has been added to any associated remote MediaStreams.
      /// </summary>
      [event]
      void onTrack(RTCTrackEvent event);

      /// <summary>
      /// Called when a receiver is completely removed. This is current (Plan B SDP)
      /// behavior that occurs when processing the removal of a remote track, and is
      /// called when the receiver is removed and the track is muted. When Unified
      /// Plan SDP is supported, transceivers can change direction (and receivers
      /// stopped) but receivers are never removed, so this is never called.
      /// https://w3c.github.io/webrtc-pc/#process-remote-track-removal
      /// </summary>
      [event]
      void onRemoveTrack(RTCTrackEvent event);
    };
  }
}
