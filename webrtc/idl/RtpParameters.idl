/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {

    [dictionary]
    struct RTCRtpFecParameters {
      /// <summary>
      /// Gets or sets the SSRC to use for FEC. If unset in an RTCRtpSender object, the browser will choose.
      /// </summary>
      [optional]
      uint32 ssrc;

      /// <summary>
      /// Gets or sets the Forward Error Correction (FEC) mechanism to use: "red", "red+ulpfec" or "flexfec".
      /// </summary>
      string mechanism;
    };

    /// <summary>
    /// The RTCRtpRtxParameters dictionary contains information relating to retransmission (RTX) settings.
    /// </summary>
    [dictionary]
    struct RTCRtpRtxParameters {
      /// <summary>
      /// Gets or sets the SSRC to use for retransmission, as specified in [RFC4588]. If unset
      /// when passed to RTCRtpSender.send(), the browser will choose.
      /// </summary>
      [optional]
      uint32 ssrc;
    };

    [dictionary]
    struct RTCRtpCodingParameters {
      /// <summary>
      /// Gets or sets the RID header extension as defined by
      /// [JSEP] (section 5.2.1.). The RID is not modifiable
      /// via setParameters. It can only be set or modified
      /// in addTransceiver on the sending side. Read-only
      /// parameter.
      /// </summary>
      string rid;

      /// <summary>
      /// Gets or sets the SSRC for this encoding.
      /// </summary>
      [optional]
      uint32          ssrc;
      
      /// <summary>
      /// Gets or sets a codec to be sent. Must reference a
      /// payload type from the codecs member of RTCRtpParameters.
      /// If left unset, the implementation will select a codec
      /// according to its default policy.
      /// </summary>
      [optional]
      uint8           codecPayloadType;

      /// <summary>
      /// Specifies the FEC mechanism if set.
      /// </summary>
      [optional]
      RTCRtpFecParameters fec;

      /// <summary>
      /// Specifies the RTX [RFC4588] parameters if set.
      /// </summary>
      [optional]
      RTCRtpRtxParameters rtx;

      /// <summary>
      /// Gets or sets a flag that this encoding is actively being
      /// sent. Setting it to false causes this encoding to no
      /// longer be sent. Setting it to true causes this encoding
      /// to be sent.
      /// </summary>
      bool            active = true;
    };

    [dictionary]
    struct RTCRtpDecodingParameters : RTCRtpCodingParameters {
    };

    [dictionary]
    struct RTCRtpEncodingParameters : RTCRtpCodingParameters {
      /// <summary>
      /// Gets or sets the discontinuous transmission mode. This
      /// member is only used if the sender's kind is "audio".
      /// It indicates whether discontinuous transmission will
      /// be used. Setting it to disabled causes discontinuous
      /// transmission to be turned off. Setting it to enabled
      /// causes discontinuous transmission to be turned on if
      /// it was negotiated (either via a codec-specific parameter
      /// or via negotiation of the CN codec); if it was not
      /// negotiated (such as when setting voiceActivityDetection
      /// to false), then discontinuous operation will be turned
      /// off regardless of the value of dtx, and media will be
      /// sent even when silence is detected.
      /// </summary>
      [optional]
      RTCDtxStatus    dtx;
      /// <summary>
      /// Gets or sets the priority of this encoding. It is
      /// specified in [RTCWEB-TRANSPORT], Section 4.
      /// </summary>
      RTCPriorityType priority = low;
      /// <summary>
      /// Gets or sets the preferred duration of media
      /// represented by a packet in milliseconds for this
      /// encoding. Typically, this is only relevant for audio
      /// encoding. The user agent MUST use this duration if
      /// possible, and otherwise use the closest available
      /// duration. This value MUST take precedence over any
      /// "ptime" attribute in the remote description, whose
      /// processing is described in [JSEP] (section 5.10.).
      /// Note that the user agent MUST still respect the limit
      /// imposed by any "maxptime" attribute, as defined in
      /// [RFC4566], Section 6.
      /// </summary>
      Milliseconds   ptime;
      /// <summary>
      /// Gets or sets the maximum bitrate that can be used
      /// to send this encoding. The encoding may also be
      /// further constrained by other limits (such as
      /// maxFramerate or per-transport or per-session
      /// bandwidth limits) below the maximum specified
      /// here. maxBitrate is computed the same way as
      /// the Transport Independent Application Specific
      /// Maximum (TIAS) bandwidth defined in [RFC3890]
      /// Section 6.2.2, which is the maximum bandwidth
      /// needed without counting IP or other transport
      /// layers like TCP or UDP.
      /// </summary>
      [optional]
      unsigned long   maxBitrate;
      /// <summary>
      /// Gets or sets the maximum framerate that can be
      /// used to send this encoding, in frames per second.
      /// </summary>
      [optional]
      double          maxFramerate;

      /// <summary>
      /// Gets or sets the resolution scale. This member is only
      /// present if the sender's kind is "video". The video's
      /// resolution will be scaled down in each dimension by
      /// the given value before sending. For example, if the
      /// value is 2.0, the video will be scaled down by a factor
      /// of 2 in each dimension, resulting in sending a video of
      /// one quarter the size. If the value is 1.0, the video
      /// will not be affected. The value must be greater than
      /// or equal to 1.0. By default, the sender will not apply
      /// any scaling, (i.e., scaleResolutionDownBy will be 1.0).
      /// </summary>
      double          scaleResolutionDownBy = 1.0;
      double          scaleFramerateDownBy = 1.0;

      /// <summary>
      /// The encodingIds on which this layer depends. Within this specification
      /// encodingIds are permitted only within the same RTCRtpCodingParameters
      /// sequence. In the future if MST were to be supported, then if searching
      /// within an encodings[] sequence did not produce a match, then a global
      /// search would be carried out. In order to send scalable video coding (SVC),
      /// both the encodingId and dependencyEncodingIds are required.
      /// </summary>
      StringList      dependencyEncodingIds;
    };

    /// The RTCRtpCodecCapability dictionary provides information on the capabilities of a codec.
    /// Exactly one RTCRtpCodecCapability will be present for each supported combination of
    /// parameters that requires a distinct value of preferredPayloadType.
    [dictionary]
    struct RTCRtpCodecCapability {
      /// <summary>
      /// The preferred RTP payload type for the codec denoted by RTCRtpCodecCapability.name.
      /// This attribute was added to make it possible for the sender and receiver to pick a
      /// matching payload type when creating sender and receiver parameters. When returned
      /// by RTCRtpSender.getCapabilities(), RTCRtpCapabilities.codecs.preferredPayloadtype
      /// represents the preferred RTP payload type for sending. When returned by
      /// RTCRtpReceiver.getCapabilities(), RTCRtpCapabilities.codecs.preferredPayloadtype
      /// represents the preferred RTP payload type for receiving. To avoid payload type
      /// conflicts, each value of preferredPayloadType MUST be unique.
      /// </summary>
      [optional]
      uint8                 preferredPayloadType;

      /// <summary>
      /// The MIME media subtype. Valid subtypes are listed in [IANA-RTP-2].
      /// </summary>
      string                name;

      /// <summary>
      /// The codec MIME media type/subtype. Valid media types and subtypes are listed in [IANA-RTP-2].
      /// </summary>
      string                mimeType;

      /// <summary>
      /// Codec clock rate expressed in Hertz. If unset, the codec is applicable to any clock rate.
      /// </summary>
      [optional]
      unsigned long         clockRate;

      /// <summary>
      /// The number of channels supported (e.g. two for stereo). For video, this attribute is unset.
      /// </summary>
      [optional]
      unsigned short        channels;

      /// <summary>
      /// The "format specific parameters" field from the "a=fmtp" line in the SDP
      /// corresponding to the codec, if one exists.
      /// </summary>
      string                sdpFmtpLine;

      /// <summary>
      /// The maximum packetization time supported by the RTCRtpReceiver.
      /// </summary>
      Milliseconds          maxPtime;

      /// <summary>
      /// The preferred duration of media represented by a packet in milliseconds for the RTCRtpSender or RTCRtpReceiver.
      /// </summary>
      Milliseconds          ptime;

      /// <summary>
      /// Transport layer and codec-specific feedback messages for this codec.
      /// </summary>
      RTCRtcpFeedbackList   rtcpFeedback;

      /// <summary>
      /// Codec-specific parameters that must be signaled to the remote party.
      /// </summary>
      StringList            parameters;

      /// <summary>
      /// Codec-specific parameters that may be optionally signalled and are available
      /// as additional supported information or settings about the codec.
      /// </summary>
      StringList            options;

      /// <summary>
      /// Maximum number of temporal layer extensions supported by this codec (e.g. a
      /// value of 1 indicates support for up to 2 temporal layers). A value of 0
      /// indicates no support for temporal scalability.
      /// </summary>
      unsigned short        maxTemporalLayers = 0;

      /// <summary>
      /// Maximum number of spatial layer extensions supported by this codec
      /// (e.g. a value of 1 indicates support for up to 2 spatial layers). A
      /// value of 0 indicates no support for spatial scalability.
      /// </summary>
      unsigned short        maxSpatialLayers = 0;

      /// <summary>
      /// Whether the implementation can send/receive SVC layers utilizing
      /// distinct SSRCs. Unset for audio codecs. For video codecs, only set
      /// if the codec supports scalable video coding with MRST.
      /// </summary>
      bool                  svcMultiStreamSupport = false;
    };


    /// <summary>
    /// The RTCRtpHeaderExtensionCapability dictionary provides information relating to supported header extensions.
    /// </summary>
    [dictionary]
    struct RTCRtpHeaderExtensionCapability {
      /// <summary>
      /// The URI of the RTP header extension, as defined in [RFC5285].
      /// </summary>
      string uri;

      /// <summary>
      /// The preferred ID value that goes in the packet.
      /// </summary>
      [optional]
      unsigned short  preferredId;

      /// <summary>
      /// If true, it is preferred that the value in the header be encrypted as per [RFC6904]. Default is to prefer unencrypted.
      /// </summary>
      bool            preferredEncrypt = false;
    };

    /// <summary>
    /// The RTCRtpCapabilities object expresses the capabilities of RTCRtpSender and RTCRtpReceiver
    /// objects. Features which are mandatory to implement in [RTP-USAGE], such as RTP/RTCP multiplexing
    /// [RFC5761], audio/video multiplexing [RTP-MULTI-STREAM] and reduced size RTCP [RFC5506] are 
    /// assumed to be available and are therefore not included in RTCRtpCapabilities,
    /// although these parameters may be set.
    /// </summary>
    [dictionary]
    struct RTCRtpCapabilities {
      /// <summary>
      /// Supported media codecs as well as entries for RTX, RED and FEC mechanisms. There will
      /// only be a single entry in codecs[] for retransmission via RTX, with sdpFmtpLine not present.
      /// </summary>
      RTCRtpCodecCapabilityList             codecs;

      /// <summary>
      /// Supported RTP header extensions.
      /// </summary>
      RTCRtpHeaderExtensionCapabilityList   headerExtensions;

      /// <summary>
      /// Supported Forward Error Correction (FEC) mechanisms and combinations. Supported values
      /// are "red" [RFC2198], "red+ulpfec" [RFC5109] and "flexfec" [FLEXFEC].
      /// Note that supported mechanisms also need to be included within
      /// RTCRtpCapabilities.codecs[]. [FEC] summarizes requirements relating to FEC mechanisms.
      /// </summary>
      StringList                            fecMechanisms;
    };

    /// <summary>
    /// RTCRtpParameters contains the RTP stack settings used by both senders and receivers.
    /// </summary>
    [dictionary]
    struct RTCRtpHeaderExtensionParameters {
      /// <summary>
      /// Gets or sets the URI of the RTP header extension, as defined in [RFC5285].
      /// </summary>
      string          uri;
      /// <summary>
      /// Gets or sets the value put in the RTP packet to identify the header extension.
      /// </summary>
      unsigned short  id;
      /// <summary>
      /// Gets or sets whether the header extension is encrypted or not.
      /// </summary>
      bool            encrypted = false;
    };

    /// <summary>
    /// RTCRtcpParameters provides information on RTCP settings.
    /// </summary>
    [dictionary]
    struct RTCRtcpParameters {
      /// <summary>
      /// Gets or sets the Canonical Name (CNAME) used by RTCP (e.g. in SDES messages). 
      /// </summary>
      string cname;
      /// <summary>
      /// Gets or sets whether reduced size RTCP [RFC5506] is configured (if true)
      /// or compound RTCP as specified in [RFC3550] (if false). Read-only parameter.
      /// </summary>
      bool   reducedSize;
    };

    /// <summary>
    /// RTCRtcpFeedback provides information on RTCP feedback messages.
    /// <summary>
    [dictionary]
    struct RTCRtcpFeedback
    {
      /// <summary>
      /// Valid values for type are the "RTCP Feedback" Attribute Values enumerated
      /// in [IANA-SDP-14] ("ack", "ccm", "nack", etc.), as well as "goog-remb"
      /// [REMB] and "transport-cc" [TRANSPORT-CC].
      /// </summary>
      string type;
      /// <summary>
      /// For a type value of "ack" or "nack", valid values for parameter are the
      /// "ack" and "nack" Attribute Values enumerated in [IANA-SDP-15] ("sli",
      /// "rpsi", etc.). For the Generic NACK feedback message defined in
      /// [RFC4585] Section 6.2.1, the type attribute is set to "nack" and
      /// the parameter attribute is unset. For a type value of "ccm", valid
      /// values for parameter are the "Codec Control Messages" enumerated in
      /// [IANA-SDP-19] ("fir", "tmmbr" (includes "tmmbn"), etc.).
      /// </summary>
      string parameter;
    };

    /// RTCRtpCodecParameters provides information on codec settings.
    [dictionary]
    struct RTCRtpCodecParameters {
      /// <summary>
      /// The value that goes in the RTP Payload Type Field [RFC3550].
      /// The payloadType MUST always be provided, and MUST be unique.
      /// </summary>
      uint8         payloadType;

      /// <summary>
      /// The codec MIME subtype. Valid subtypes are listed in [IANA-RTP-2].
      /// </summary>
      string        name;

      /// <summary>
      /// The codec MIME media type/subtype. Valid media types and subtypes are listed in [IANA-RTP-2].
      /// </summary>
      string        mimeType;

      /// <summary>
      /// Codec clock rate expressed in Hertz.
      /// </summary>
      [optional]
      unsigned long  clockRate;

      /// <summary>
      /// The number of channels supported (e.g. two for stereo). If unset for
      /// audio, use the codec default. For video, this can be left unset.
      /// </summary>
      [optional]
      unsigned short channels;

      /// <summary>
      /// The "format specific parameters" field from the "a=fmtp" line in the SDP corresponding
      /// to the codec, if one exists, as defined by [JSEP] (section 5.8.). For an RTCRtpSender,
      /// these parameters come from the remote description, and for an RTCRtpReceiver,
      /// they come from the local description. Read-only parameter.
      /// </summary>
      string          sdpFmtpLine;

      /// <summary>
      /// The duration of media represented by a packet in milliseconds for
      /// the RTCRtpSender. If unset, the RTCRtpSender may select any
      /// value up to maxptime.
      /// </summary>
      Milliseconds    ptime;

      /// <summary>
      /// The maximum packetization time set on the RTCRtpSender. Not specified if
      /// unset. If ptime is also set, maxptime is ignored.
      /// </summary>
      Milliseconds    maxPtime;

      /// <summary>
      /// Transport layer and codec-specific feedback messages for this codec.
      /// </summary>
      RTCRtcpFeedbackList rtcpFeedback;


    };

    [dictionary]
    struct RTCRtpParameters
    {
      /// <summary>
      /// Gets or sets a sequence containing parameters for RTP header extensions.
      /// </summary>
      RTCRtpHeaderExtensionParametersList headerExtensions;

      /// <summary>
      /// Gets or sets parameters used for RTCP. 
      /// </summary>
      RTCRtcpParameters                   rtcp;

      /// <summary>
      /// Gets or sets a sequence containing the media codecs that an
      /// RTCRtpSender will choose from, as well as entries for RTX,
      /// RED and FEC mechanisms. Corresponding to each media codec
      /// where retransmission via RTX is enabled, there will be an
      /// entry in codecs[] with a mimeType attribute indicating
      /// retransmission via "audio/rtx" or "video/rtx", and an
      /// sdpFmtpLine attribute (providing the "apt" and "rtx-time"
      /// parameters).
      /// </summary>
      RTCRtpCodecParametersList           codecs;

      /// <summary>
      /// The muxId assigned to the RTP stream, if any. In an RTCRtpReceiver
      /// or RTCRtpSender, this corresponds to MID RTP header extension defined
      /// in [BUNDLE]. This is a stable identifier that permits the track
      /// corresponding to an RTP stream to be identified, rather than relying
      /// on an SSRC. An SSRC is randomly generated and can change arbitrarily
      /// due to conflicts with other SSRCs, whereas the muxId has a value whose
      /// meaning can be defined in advance between RTP sender and receiver,
      /// assisting in RTP demultiplexing. Since muxId is included in
      /// RTCRtpParameters, if it is desired to send simulcast streams with
      /// different muxId values for each stream, then multiple RTCRtpSender
      /// objects are needed.
      /// </summary>
      string muxId;
    };

    [dictionary]
    struct RTCRtpSendParameters : RTCRtpParameters {
      /// <summary>
      /// Gets or sets a unique identifier for the last set
      /// of parameters applied. Ensures that setParameters
      /// can only be called based on a previous getParameters,
      /// and that there are no intervening changes.
      /// </summary>
      string                        transactionId;
      /// <summary>
      /// Gets or sets a sequence containing parameters for RTP
      /// encodings of media.
      /// </summary>
      RTCRtpEncodingParametersList  encodings;
      /// <summary>
      /// Gets or sets the degradation preference when bandwidth is
      /// constrained and the RtpSender needs to choose between
      /// degrading resolution or degrading framerate,
      /// degradationPreference indicates which is preferred.
      /// </summary>
      RTCDegradationPreference      degradationPreference = balanced;
    };

    [dictionary]
    struct RTCRtpReceiveParameters : RTCRtpParameters {
      /// <summary>
      /// Gets or sets a sequence containing information
      /// about incoming RTP encodings of media.
      /// </summary>
      RTCRtpDecodingParametersList encodings;
    };

  }
}
